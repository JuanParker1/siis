{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ref",
				"ref_order_id"
			],
			[
				"ord",
				"order_id"
			],
			[
				"tri",
				"trigger_price"
			],
			[
				"liim",
				"limit_price"
			],
			[
				"vau",
				"values"
			],
			[
				"_a",
				"_aliases"
			],
			[
				"_al",
				"_aliases"
			],
			[
				"key",
				"key_code"
			],
			[
				"comm",
				"commands_handler"
			],
			[
				"sig",
				"signal_type"
			],
			[
				"oper",
				"operations"
			],
			[
				"opera",
				"operations"
			],
			[
				"op",
				"operations"
			],
			[
				"quo",
				"quote_symbol"
			],
			[
				"Bin",
				"BinanceAccount"
			],
			[
				"Dir",
				"direction"
			],
			[
				"_fi",
				"_first_row"
			],
			[
				"dy",
				"dynamic-stop-loss"
			],
			[
				"ta",
				"take_profit"
			],
			[
				"stop",
				"stop_loss"
			],
			[
				"ope",
				"operations"
			],
			[
				"_oc",
				"_cond_price"
			],
			[
				"trade",
				"tradeops"
			],
			[
				"reg",
				"register"
			],
			[
				"_d",
				"_id_by_name"
			],
			[
				"cl",
				"clazz"
			],
			[
				"_op",
				"_operations"
			],
			[
				"_t",
				"_table_first_row"
			],
			[
				"dat",
				"dataframe"
			],
			[
				"num",
				"num_rows"
			],
			[
				"data",
				"dataframe"
			],
			[
				"col",
				"columns"
			],
			[
				"hea",
				"header_rows"
			],
			[
				"foo",
				"footer"
			],
			[
				"bod",
				"body"
			],
			[
				"_ta",
				"_table_first_col"
			],
			[
				"head",
				"header"
			],
			[
				"he",
				"height"
			],
			[
				"quan",
				"quantities"
			],
			[
				"limi",
				"limit_prices"
			],
			[
				"qua",
				"quantity"
			],
			[
				"order",
				"order_price"
			],
			[
				"app",
				"append"
			],
			[
				"orders",
				"orders_types"
			],
			[
				"com",
				"commission_asset"
			],
			[
				"MANA",
				"MANAGER_USER"
			],
			[
				"Str",
				"StrategyTrade"
			],
			[
				"take",
				"take-profit"
			],
			[
				"trad",
				"trade_id"
			],
			[
				"par",
				"params"
			],
			[
				"mar",
				"market_id"
			],
			[
				"stra",
				"strategy"
			],
			[
				"Strat",
				"StrategyMarginTrade"
			],
			[
				"tra",
				"trader_service"
			],
			[
				"watc",
				"watcher_service"
			],
			[
				"user",
				"user_context"
			],
			[
				"stat",
				"statistic"
			],
			[
				"servi",
				"services"
			],
			[
				"last",
				"last_char_time"
			],
			[
				"MOD_S",
				"MOD_SHIFT"
			],
			[
				"c",
				"command_id"
			],
			[
				"mi",
				"min_notional"
			],
			[
				"id",
				"identifier"
			],
			[
				"tim",
				"timestamp"
			],
			[
				"sub",
				"sub_trader"
			],
			[
				"time",
				"timeframe"
			],
			[
				"TRAD",
				"TRADE_MARGIN"
			],
			[
				"sy",
				"symbol"
			],
			[
				"mapp",
				"mapped_instrument"
			],
			[
				"instr",
				"instrument"
			],
			[
				"appl",
				"appliance"
			],
			[
				"valu",
				"values"
			],
			[
				"start",
				"startswith"
			],
			[
				"val",
				"values"
			],
			[
				"v",
				"value"
			],
			[
				"va",
				"values"
			],
			[
				"Star",
				"startswith"
			],
			[
				"BTC",
				"BTCUSDT"
			],
			[
				"_co",
				"_cond_price"
			],
			[
				"is",
				"is_persistent"
			],
			[
				"con",
				"cond_price"
			],
			[
				"TYPE",
				"TYPE_DYNAMIC_STOP_LOSS"
			],
			[
				"_",
				"_operations"
			],
			[
				"res",
				"results"
			],
			[
				"lim",
				"limit_price"
			],
			[
				"market_o",
				"market_or_limit"
			],
			[
				"TF_MIN",
				"TF_MIN"
			],
			[
				"ema",
				"ema_rsi_signal"
			],
			[
				"em",
				"ema_rsi_signal"
			],
			[
				"cur",
				"cur_dt"
			],
			[
				"clo",
				"close_exec_price"
			],
			[
				"or",
				"orderID"
			],
			[
				"ent",
				"entry"
			],
			[
				"bb",
				"bb_basis"
			],
			[
				"sign",
				"_signal"
			],
			[
				"bre",
				"break_up"
			],
			[
				"cro",
				"crossover"
			],
			[
				"break",
				"break_up"
			],
			[
				"ta_",
				"ta_EMA"
			],
			[
				"aw",
				"awesome_slow_L"
			],
			[
				"ba",
				"base_multiplier"
			],
			[
				"re",
				"reduce"
			],
			[
				"Re",
				"ReduceOnly"
			],
			[
				"base",
				"base_tf"
			],
			[
				"tf",
				"tfs_chain"
			],
			[
				"paren",
				"parent_timeframe"
			],
			[
				"pare",
				"parent_timeframe"
			],
			[
				"ti",
				"timeframe"
			],
			[
				"_tr",
				"_atrs"
			],
			[
				"atr",
				"atr_stop"
			],
			[
				"ME",
				"METHOD_FIBONACCI"
			],
			[
				"Pi",
				"PivotPointIndicator"
			],
			[
				"ret",
				"retained_exit"
			],
			[
				"si",
				"signal"
			],
			[
				"tak",
				"taker_fee"
			],
			[
				"bitmex",
				"bitmex-backtesting"
			],
			[
				"lev",
				"level1_signal"
			],
			[
				"las",
				"last_price"
			],
			[
				"ave",
				"average"
			],
			[
				"for",
				"forexalpha"
			],
			[
				"mod",
				"modify_stop_loss"
			],
			[
				"ORD",
				"ORDER_MARKET"
			],
			[
				"orde",
				"order_type"
			],
			[
				"OR",
				"ORDER_MARKET"
			],
			[
				"sell",
				"sell_oid"
			],
			[
				"sto",
				"stop_order_qty"
			],
			[
				"close",
				"close_only"
			],
			[
				"exec",
				"exec_inst"
			]
		]
	},
	"buffers":
	[
		{
			"file": "app/generalcommands.py",
			"settings":
			{
				"buffer_size": 2561,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/tradingcommands.py",
			"settings":
			{
				"buffer_size": 16394,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "strategy/strategy.py",
			"settings":
			{
				"buffer_size": 64270,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# @date 2018-08-24\n# @author Frederic SCHERMA\n# @license Copyright (c) 2018 Dream Overflow\n# Strategy trader base class.\n\nimport threading\nimport time\n\nfrom strategy.strategytrade import StrategyTrade\nfrom strategy.strategyassettrade import StrategyAssetTrade\nfrom strategy.strategymargintrade import StrategyMarginTrade\nfrom strategy.strategyindmargintrade import StrategyIndMarginTrade\nfrom terminal.terminal import Terminal\nfrom common.utils import timeframe_to_str\nfrom notifier.signal import Signal\n\nfrom trader.order import Order\n\nimport logging\nlogger = logging.getLogger('siis.strategy')\n\n\nclass StrategyTrader(object):\n    \"\"\"\n    A strategy can manage multiple instrument. Strategy trader is on of the managed instruments.\n    \"\"\"\n\n    def __init__(self, strategy, instrument):\n        self.strategy = strategy\n        self.instrument = instrument\n        self.trades = []\n        self._mutex = threading.RLock()\n        self._next_trade_id = 1\n\n        self._global_streamer = None\n        self._timeframe_streamers = {}\n        self._stats = {\n            'perf': 0.0,     # initial\n            'worst': 0.0,    # worst trade lost\n            'best': 0.0,     # best trade profit\n            'failed': [],    # failed terminated trades\n            'success': [],   # success terminated trades\n            'roe': [],       # return to equity trades\n        }\n\n    def lock(self, blocking=True, timeout=-1):\n        self._mutex.acquire(blocking, timeout)\n\n    def unlock(self):\n        self._mutex.release()\n\n    def create_chart_streamer(self, timeframe):\n        \"\"\"\n        Create a streamer for the chart at a specific timeframe.\n        Must be overrided.\n        \"\"\"\n        return None\n\n    def subscribe(self, timeframe):\n        \"\"\"\n        Use or create a specific streamer.\n        \"\"\"\n        if timeframe in self._timeframe_streamers:\n            self._timeframe_streamers[timeframe].use()\n            return True\n        else:\n            streamer = self.create_chart_streamer(timeframe)\n\n            if streamer:\n                streamer.use()\n                self._timeframe_streamers[timeframe] = streamer\n                return True\n\n        return False\n\n    def unsubscribe(self, timeframe):\n        \"\"\"\n        Delete a specific streamer when no more subscribers.\n        \"\"\"\n        if timeframe in self._timeframe_streamers:\n            self._timeframe_streamers[timeframe].unuse()\n            if self._timeframe_streamers[timeframe].is_free():\n                # delete if 0 subscribers\n                del self._timeframe_streamers[timeframe]\n    \n            return True\n        else:\n            return False\n\n    def stream_call(self):\n        \"\"\"\n        Process the call for the strategy trader. Must be overriden.\n        \"\"\"\n        pass\n\n    def process(self, tf, timestamp):\n        \"\"\"\n        @param tf Smallest updated time unit.\n        @param timestamp Current timestamp (or past time in backtest)\n        \"\"\"\n        pass\n\n    def order_signal(self, signal_type, data):\n        \"\"\"\n        Update quantity/filled on a trade, deleted or canceled.\n        \"\"\"\n        self.lock()\n\n        try:\n            for trade in self.trades:\n                # update each trade relating the order (might be a unique)\n                order_id = data[1]['id'] if type(data[1]) is dict else data[1]\n                ref_order_id = data[2] if (len(data) > 2 and type(data[2]) is str) else None\n\n                if trade.is_target_order(order_id, ref_order_id):\n                    trade.order_signal(signal_type, data[1], data[2] if len(data) > 2 else None)\n\n        except Exception as e:\n            logger.error(repr(e))\n\n        self.unlock()\n\n    def position_signal(self, signal_type, data):\n        \"\"\"\n        Update quantity/filled on a trade, delete or cancel.\n        \"\"\"\n        self.lock()\n\n        try:\n            for trade in self.trades:\n                # update each trade relating the position (could be many)\n                position_id = data[1]['id'] if type(data[1]) is dict else data[1]\n                ref_order_id = data[2] if (len(data) > 2 and type(data[2]) is str) else None\n\n                if trade.is_target_position(position_id, ref_order_id):\n                    trade.position_signal(signal_type, data[1], data[2] if len(data) > 2 else None)\n\n        except Exception as e:\n            logger.error(repr(e))\n\n        self.unlock()\n\n    def add_trade(self, trade):\n        \"\"\"\n        Add a new trade.\n        \"\"\"\n        if not trade:\n            return False\n\n        self.lock()\n\n        trade.id = self._next_trade_id\n        self._next_trade_id += 1\n\n        self.trades.append(trade)\n        self.unlock()\n\n    def remove_trade(self, trade):\n        \"\"\"\n        Remove an existing trade.\n        \"\"\"\n        if not trade:\n            return False\n\n        self.lock()\n        self.trades.remove(trade)\n        self.unlock()\n\n    def update_timeout(self, timestamp, trade):\n        \"\"\"\n        Aadjust the take-profit to current price (bid or ofr)\n        and the stop-loss very tiny to protect the issue of the trade, when\n        the trade arrives to a validity expiration. Mostly depend ofthe timeframe of\n        the trade.\n        \"\"\"\n        if not trade:\n            return False\n\n        if not trade.is_opened() or trade.is_closing() or trade.is_closed():\n            return False\n\n        MAX_TIME_UNIT = 18\n\n        # more than max time unit of the timeframe then abort the trade\n        if (trade.created_time > 0) and ((timestamp - trade.created_time) / trade.timeframe) > MAX_TIME_UNIT:\n            # trade.modify_stop_loss()\n            # trade.modify_take_profit()\n            \n            # this will exit now but prefer exit at limit and use a tiny stop\n            trade.tp = self.instrument.close_exec_price(trade.dir)\n            trade.sl = self.instrument.close_exec_price(trade.dir)\n\n            logger.info(\"> Trade %s timeout !\" % trade.id)\n\n        return True\n\n    def update_trades(self, timestamp):\n        \"\"\"\n        Update managed trades per instruments and delete terminated trades.\n        \"\"\"\n        if not self.strategy.activity:\n            return\n\n        if not self.trades:\n            return\n\n        trader = self.strategy.trader()\n\n        #\n        # for each trade check if the TP or SL is reached and trigger if necessary\n        #\n\n        self.lock()\n\n        for trade in self.trades:\n\n            #\n            # managed operation\n            #\n\n            if trade.has_operations():\n                mutated = False\n\n                for operation in trade.operations:\n                    mutated |= operation.test_and_operate(trade, self.instrument, trader)\n\n                if mutated:\n                    trade.cleanup_operations()\n\n            #\n            # active trade\n            #\n\n            if trade.is_active():\n                self.update_timeout(timestamp, trade)\n\n                # for statistics usage\n                trade.update_stats(self.instrument.close_exec_price(trade.direction), timestamp)\n\n            #\n            # asset trade\n            #\n\n            if trade.trade_type == StrategyTrade.TRADE_BUY_SELL:\n                if trade.is_closed():\n                    continue\n\n                # process only on active trades\n                if not trade.is_active():\n                    # @todo timeout if not filled before condition...\n                    continue\n\n                if trade.is_closing():\n                    continue\n\n                # potential order exec close price (always close a long)\n                close_exec_price = self.instrument.close_exec_price(Order.LONG)\n\n                if trade.tp > 0 and (close_exec_price >= trade.tp):\n                    # take profit order\n                    # @todo or limit order for maker fee\n                    # trade.modify_take_profit(trader, market, take_profit)\n                    # close at market (taker fee)\n                    if trade.close(trader, self.instrument.market_id):\n                        self._global_streamer.member('buy-exit').update(close_exec_price, timestamp)\n\n                    # only get it at the last moment\n                    market = trader.market(self.instrument.market_id)\n\n                    # estimed profit/loss rate\n                    profit_loss_rate = (close_exec_price - trade.p) / trade.p\n\n                    # estimed maker/taker fee rate for entry and exit\n                    if trade.get_stats()['entry-maker']:\n                        profit_loss_rate -= market.maker_fee\n                    else:\n                        profit_loss_rate -= market.taker_fee\n\n                    if trade.get_stats()['exit-maker']:\n                        profit_loss_rate -= market.maker_fee\n                    else:\n                        profit_loss_rate -= market.taker_fee\n\n                    text = \"%s take-profit-market %s %.2f%% on %s (%.4f%s) at %s\" % (\n                        self.strategy.identifier, market.symbol, profit_loss_rate*100.0, market.base,\n                        profit_loss_rate/market.base_exchange_rate, trader.account.currency_display, market.format_price(close_exec_price))\n\n                    Terminal.inst().high(text, view='common') if profit_loss_rate > 0 else Terminal.inst().low(text, view='common')\n\n                    # notify\n                    self.strategy.notify_order(trade.id, Order.SHORT, self.instrument.market_id,\n                            market.format_price(close_exec_price), timestamp, trade.timeframe,\n                            'take-profit', profit_loss_rate)\n\n                elif trade.sl > 0 and (close_exec_price <= trade.sl):\n                    # stop loss order\n                    # close at market (taker fee)\n                    if trade.close(trader, self.instrument.market_id):\n                        self._global_streamer.member('buy-exit').update(close_exec_price, timestamp)\n\n                    # only get it at the last moment\n                    market = trader.market(self.instrument.market_id)\n\n                    # estimed profit/loss rate\n                    profit_loss_rate = (close_exec_price - trade.p) / trade.p\n\n                    # estimed maker/taker fee rate for entry and exit\n                    if trade.get_stats()['entry-maker']:\n                        profit_loss_rate -= market.maker_fee\n                    else:\n                        profit_loss_rate -= market.taker_fee\n\n                    if trade.get_stats()['exit-maker']:\n                        profit_loss_rate -= market.maker_fee\n                    else:\n                        profit_loss_rate -= market.taker_fee\n\n                    text = \"%s stop-market %s %.2f%% %s (%.4f%s) at %s\" % (\n                        self.strategy.identifier, market.symbol, profit_loss_rate*100.0, market.base,\n                        profit_loss_rate/market.base_exchange_rate, trader.account.currency_display, market.format_price(close_exec_price))\n\n                    Terminal.inst().high(text, view='common') if profit_loss_rate > 0 else Terminal.inst().low(text, view='common')\n\n                    # notify\n                    self.strategy.notify_order(trade.id, Order.SHORT, self.instrument.market_id,\n                            market.format_price(close_exec_price), timestamp, trade.timeframe,\n                            'stop-loss', profit_loss_rate)\n\n            #\n            # margin trade\n            #\n\n            elif trade.trade_type == StrategyTrade.TRADE_MARGIN or trade.trade_type == StrategyTrade.TRADE_IND_MARGIN:\n                # process only on active trades\n                if not trade.is_active():\n                    # @todo timeout if not filled before condition...\n                    continue\n\n                if trade.is_closed():\n                    continue\n\n                if trade.is_closing():\n                    continue\n\n                if not self.instrument.market_open:\n                    continue\n\n                # potential order exec close price\n                close_exec_price = self.instrument.close_exec_price(trade.direction)\n\n                if (trade.tp > 0) and (trade.direction > 0 and close_exec_price >= trade.tp) or (trade.direction < 0 and close_exec_price <= trade.tp):\n                    # close in profit at market (taker fee)\n                    if trade.close(trader, self.instrument.market_id):\n                        # only get it at the last moment\n                        market = trader.market(self.instrument.market_id)\n\n                        # estimed profit/loss rate\n                        if trade.direction > 0 and trade.p:\n                            profit_loss_rate = (close_exec_price - trade.p) / trade.p\n                        elif trade.direction < 0 and trade.p:\n                            profit_loss_rate = (trade.p - close_exec_price) / trade.p\n                        else:\n                            profit_loss_rate = 0\n\n                        # estimed maker/taker fee rate for entry and exit\n                        if trade.get_stats()['entry-maker']:\n                            profit_loss_rate -= market.maker_fee\n                        else:\n                            profit_loss_rate -= market.taker_fee\n\n                        if trade.get_stats()['exit-maker']:\n                            profit_loss_rate -= market.maker_fee\n                        else:\n                            profit_loss_rate -= market.taker_fee\n\n                        # and notify\n                        self.strategy.notify_order(trade.id, trade.close_direction(), self.instrument.market_id,\n                                market.format_price(close_exec_price), timestamp, trade.timeframe,\n                                'take-profit', profit_loss_rate)\n\n                        # close a long or a short position at take-profit level\n                        text = \"%s take-profit-market %s %.4f%s (%.4f) at %s\" % (\n                            self.strategy.identifier, market.symbol, profit_loss_rate*100.0, market.quote,\n                            profit_loss_rate/market.base_exchange_rate, market.format_price(close_exec_price))\n\n                        Terminal.inst().high(text, view='common') if profit_loss_rate > 0 else Terminal.inst().low(text, view='common')\n\n                    # and for streaming\n                    self._global_streamer.member('buy-exit').update(close_exec_price, timestamp)\n\n                elif (trade.sl > 0) and (trade.direction > 0 and close_exec_price <= trade.sl) or (trade.direction < 0 and close_exec_price >= trade.sl):\n                    # close a long or a short position at stop-loss level at market (taker fee)\n                    if trade.close(trader, self.instrument.market_id):\n                        # only get it at the last moment\n                        market = trader.market(self.instrument.market_id)\n\n                        # estimed profit/loss rate\n                        if trade.direction > 0 and trade.p:\n                            profit_loss_rate = (close_exec_price - trade.p) / trade.p\n                        elif trade.direction < 0 and trade.p:\n                            profit_loss_rate = (trade.p - close_exec_price) / trade.p\n                        else:\n                            profit_loss_rate = 0\n\n                        # estimed maker/taker fee rate for entry and exit\n                        if trade.get_stats()['entry-maker']:\n                            profit_loss_rate -= market.maker_fee\n                        else:\n                            profit_loss_rate -= market.taker_fee\n\n                        if trade.get_stats()['exit-maker']:\n                            profit_loss_rate -= market.maker_fee\n                        else:\n                            profit_loss_rate -= market.taker_fee\n\n                        # and notify\n                        self.strategy.notify_order(trade.id, trade.close_direction(), self.instrument.market_id,\n                                market.format_price(close_exec_price), timestamp, trade.timeframe,\n                                'stop-loss', profit_loss_rate)\n\n                        text = \"%s stop-market %s %.4f%s (%.4f) at %s\" % (\n                            self.strategy.identifier, market.symbol, profit_loss_rate, market.quote,\n                            profit_loss_rate/market.base_exchange_rate, market.format_price(close_exec_price))\n\n                        Terminal.inst().high(text, view='common') if profit_loss_rate > 0 else Terminal.inst().low(text, view='common')\n\n                    # and for streaming                            \n                    self._global_streamer.member('sell-exit').update(close_exec_price, timestamp)\n\n        self.unlock()\n\n        #\n        # remove terminated, rejected, canceled and empty trades\n        #\n\n        mutated = False\n\n        self.lock()\n\n        for trade in self.trades:\n            if trade.can_delete():\n                mutated = True\n\n                # cleanup if necessary before deleting the trade related refs, and add them to the deletion list\n                trade.remove(trader)\n\n                # record the trade for analysis and learning\n                if not trade.is_canceled():\n                    # estimation on mid last price, but might be close market price\n                    market = trader.market(self.instrument.market_id)\n\n                    rate = trade.pl\n\n                    # estimed maker/taker fee rate for entry and exit\n                    if trade._stats['entry-maker']:\n                        rate -= market.maker_fee\n                    else:\n                        rate -= market.taker_fee\n\n                    if trade._stats['exit-maker']:\n                        rate -= market.maker_fee\n                    else:\n                        rate -= market.taker_fee\n\n                    # estimed commission fee rate\n                    # @todo\n\n                    # perf sommed here it means that its not done during partial closing\n                    if rate != 0.0:\n                        self._stats['perf'] += rate\n                        self._stats['worst'] = min(self._stats['worst'], rate)\n                        self._stats['best'] = max(self._stats['best'], rate)\n\n                    record = {\n                        'id': trade.id,\n                        'ts': trade.t,\n                        'd': trade.direction_to_str(),\n                        'p': market.format_price(trade.p),\n                        'q': market.format_quantity(trade.q),\n                        'e': market.format_quantity(trade.e),\n                        'x': market.format_quantity(trade.x),\n                        'tp': market.format_price(trade.tp),\n                        'sl': market.format_price(trade.sl),\n                        'rate': rate,\n                        'tf': timeframe_to_str(trade.timeframe),\n                        's': trade.state_to_str(),\n                        'c': trade.conditions,\n                        'b': market.format_price(trade.best_price()),\n                        'w': market.format_price(trade.worst_price()),\n                        'bt': trade.best_price_timestamp(),\n                        'wt': trade.worst_price_timestamp(),\n                    }\n\n                    if rate < 0:\n                        self._stats['failed'].append(record)\n                    elif rate > 0:\n                        self._stats['success'].append(record)\n                    else:\n                        self._stats['roe'].append(record)\n\n        # recreate the list of trade\n        if mutated:\n            trades_list = []\n\n            for trade in self.trades:\n                if not trade.can_delete():\n                    trades_list.append(trade)\n\n        self.unlock()\n\n\n\n\n\n        rm_list = []\n\n        self.lock()\n\n        for trade in self.trades:\n            if trade.can_delete():\n                # cleanup if necessary before deleting the trade related refs, and add them to the deletion list\n                trade.remove(trader)\n                rm_list.append(trade)\n\n                # record the trade for analysis and learning\n                if not trade.is_canceled():\n                    # estimation on mid last price, but might be close market price\n                    market = trader.market(self.instrument.market_id)\n\n                    rate = trade.pl\n\n                    # estimed maker/taker fee rate for entry and exit\n                    if trade._stats['entry-maker']:\n                        rate -= market.maker_fee\n                    else:\n                        rate -= market.taker_fee\n\n                    if trade._stats['exit-maker']:\n                        rate -= market.maker_fee\n                    else:\n                        rate -= market.taker_fee\n\n                    # estimed commission fee rate\n                    # @todo\n\n                    # perf sommed here it means that its not done during partial closing\n                    if rate != 0.0:\n                        self._stats['perf'] += rate\n                        self._stats['worst'] = min(self._stats['worst'], rate)\n                        self._stats['best'] = max(self._stats['best'], rate)\n\n                    record = {\n                        'id': trade.id,\n                        'ts': trade.t,\n                        'd': trade.direction_to_str(),\n                        'p': market.format_price(trade.p),\n                        'q': market.format_quantity(trade.q),\n                        'e': market.format_quantity(trade.e),\n                        'x': market.format_quantity(trade.x),\n                        'tp': market.format_price(trade.tp),\n                        'sl': market.format_price(trade.sl),\n                        'rate': rate,\n                        'tf': timeframe_to_str(trade.timeframe),\n                        's': trade.state_to_str(),\n                        'c': trade.conditions,\n                        'b': market.format_price(trade.best_price()),\n                        'w': market.format_price(trade.worst_price()),\n                        'bt': trade.best_price_timestamp(),\n                        'wt': trade.worst_price_timestamp(),\n                    }\n\n                    if rate < 0:\n                        self._stats['failed'].append(record)\n                    elif rate > 0:\n                        self._stats['success'].append(record)\n                    else:\n                        self._stats['roe'].append(record)\n\n        # delete terminated trades\n        for trade in rm_list:\n            self.trades.remove(trade)\n\n        self.unlock()\n\n    def update_trailing_stop(self, trade, market):\n        \"\"\"\n        Update the stop price of a trade using a simple level distance or percent distance method.\n\n        @note This method is not a way to process a stop, it mostly failed, close for nothing at a wrong price.\n        \"\"\"\n        close_exec_price = market.price  #  market.close_exec_price(trade.direction)\n        stop_loss = trade.sl\n\n        if trade.direction > 0:\n            # long case\n            pass\n\n            # ratio = close_exec_price / trade.p\n            # sl_ratio = (trade.p - trade.sl) / trade.p\n            # dist = (close_exec_price - trade.sl) / trade.p\n            # step = 0.01  # 1% trailing stop-loss\n\n            # # # @todo take a stop-loss from a timeframe level\n            # # # profit >= 1% up the stop-loss\n            # # if dist > (sl_ratio + step):\n            # #     stop_loss = close_exec_price * (1.0 - sl_ratio)\n            # #     logger.debug(\"update SL from %s to %s\" % (trade.sl, stop_loss))\n\n            # # # protect from loss when a trade become profitable\n            # # # not a good idea because it depend of the volatility\n            # # if ratio >= 1.01:\n            # #     stop_loss = max(stop_loss, trade.p)  # at 1% profit stop at break-even\n            \n            # # # alternative @todo how to trigger\n            # # if ratio >= 1.10:\n            # #     stop_loss = max(trade.sl, close_exec_price - (close_exec_price/trade.p*(close_exec_price-trade.p)*0.33))\n\n            # # ultra large and based on the distance of the price\n            # # if dist > 0.25:\n            # #     stop_loss = trade.p + (trade.p * (dist * 0.5))\n\n            # # if stop_loss != trade.sl:\n            # #     logger.info(\"update SL from %s to %s (market price %s)\" % (trade.sl, stop_loss, market.price))\n            # #     # trade.modify_stop_loss(trader, market.market_id, stop_loss)\n            # #     trade.sl = stop_loss\n\n        elif trade.direction < 0:\n            # short case\n            pass\n",
			"file": "strategy/strategytrader.py",
			"file_size": 24559,
			"file_write_time": 132057788689655252,
			"settings":
			{
				"buffer_size": 24670,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "strategy/strategyassettrade.py",
			"settings":
			{
				"buffer_size": 13495,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "strategy/strategyindmargintrade.py",
			"settings":
			{
				"buffer_size": 19591,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "strategy/strategymargintrade.py",
			"settings":
			{
				"buffer_size": 20725,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "strategy/strategytrade.py",
			"settings":
			{
				"buffer_size": 15191,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 235 files for \"can_del\" (case sensitive)\n\n/home/frederic/dev/trading/siis/strategy/strategytrade.py:\n  177          pass\n  178  \n  179:     def can_delete(self):\n  180          \"\"\"\n  181          Because of the slippage once a trade is closed deletion can only be done once all the quantity of the\n  ...\n  434  \n  435          for operation in self._operations:\n  436:             if not operation.can_delete():\n  437                  ops.append(operation)\n  438  \n\n/home/frederic/dev/trading/siis/strategy/strategytrader.py:\n  439  \n  440          for trade in self.trades:\n  441:             if trade.can_delete():\n  442                  # cleanup if necessary before deleting the trade related refs, and add them to the deletion list\n  443                  trade.remove(trader)\n\n/home/frederic/dev/trading/siis/strategy/tradeop/tradeop.py:\n   77      #\n   78  \n   79:     def can_delete(self):\n   80          return self._count == 0\n   81  \n\n4 matches across 3 files\n\n\nSearching 235 files for \"def remove(self, trade)\" (case sensitive)\n\n0 matches",
			"settings":
			{
				"buffer_size": 1059,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "siis.py",
			"settings":
			{
				"buffer_size": 24992,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "strategy/cryptoalpha/caparameters2.py",
			"settings":
			{
				"buffer_size": 8649,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "strategy/cryptoalpha/caparameters.py",
			"settings":
			{
				"buffer_size": 8740,
				"line_ending": "Unix"
			}
		},
		{
			"file": "strategy/cryptoalpha/casuba.py",
			"settings":
			{
				"buffer_size": 37781,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "TODO",
			"settings":
			{
				"buffer_size": 6783,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "strategy/region/region.py",
			"settings":
			{
				"buffer_size": 1469,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				"Syntax Check"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 32.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"gi",
				"Git: Commit"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"git add",
				"Git: Add..."
			],
			[
				"git puh",
				"Git: Push"
			],
			[
				"git pus",
				"Git: Push"
			],
			[
				"erro",
				"Anaconda: Show error list"
			],
			[
				"git ad",
				"Git: Add..."
			],
			[
				"diff",
				"Git: Diff Current File"
			],
			[
				"git tag",
				"Git: New Tag"
			],
			[
				"git psu",
				"Git: Push"
			],
			[
				"err",
				"Anaconda: Show error list"
			],
			[
				"requi",
				"Set Syntax: requirements.txt"
			],
			[
				"python",
				"Build With: Python"
			],
			[
				"run",
				"Anaconda: Run Current Test"
			],
			[
				"git",
				"Git: Diff Current File"
			],
			[
				"git ",
				"Git: Commit"
			],
			[
				"synta re",
				"Set Syntax: reStructuredText Improved"
			],
			[
				"restr",
				"Set Syntax: reStructuredText Improved"
			],
			[
				"rest",
				"Set Syntax: reStructuredText Improved"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"git g",
				"GitGutter: Compare Against HEAD"
			],
			[
				"git gu",
				"GitGutter: Compare Against Branch"
			],
			[
				"enab",
				"Package Control: Enable Package"
			],
			[
				"emmet",
				"Emmet: Split\\Join Tag"
			],
			[
				"emme",
				"Emmet: Go to Matching Pair"
			],
			[
				"syn ht",
				"Set Syntax: HTML"
			],
			[
				"emmet ",
				"Set Syntax: Emmet"
			],
			[
				"packag ds",
				"Package Control: Disable Package"
			],
			[
				"pack en",
				"Package Control: Enable Package"
			],
			[
				"req",
				"requirements.txt: Clear Cache"
			],
			[
				"pack ins",
				"Package Control: Install Package"
			],
			[
				"pack up",
				"Package Control: Upgrade Package"
			],
			[
				"pack",
				"Package Control: List Packages"
			],
			[
				"ana",
				"Anaconda: Show error list"
			],
			[
				"ana got",
				"Anaconda: Goto object definition"
			],
			[
				"an goto",
				"Anaconda: Goto object definition"
			],
			[
				"got",
				"Emmet: Go to Matching Pair"
			],
			[
				"find",
				"Anaconda: Find object usage"
			],
			[
				"packa en",
				"Package Control: Enable Package"
			],
			[
				"package dis",
				"Package Control: Disable Package"
			],
			[
				"pack e",
				"Package Control: Enable Package"
			],
			[
				"lower",
				"Convert Case: Lower Case"
			],
			[
				"pac",
				"Package Control: List Packages"
			],
			[
				"error",
				"Anaconda: Show error list"
			],
			[
				"git diff",
				"Git: Diff Tool Current File"
			],
			[
				"pack lis",
				"Package Control: List Packages"
			],
			[
				"git dif",
				"Git: Diff Current File"
			],
			[
				"git commi",
				"Git: Commit"
			],
			[
				"build",
				"Build With: Python"
			],
			[
				"git pu",
				"Git: Push"
			],
			[
				"git co",
				"Git: Commit"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"render",
				"Preferences: Key Bindings - User"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"er",
				"Anaconda: Show error list"
			],
			[
				"git c",
				"Git: Commit"
			],
			[
				"id",
				"Indentation: Reindent Lines"
			],
			[
				"iden",
				"Indentation: Reindent Lines"
			],
			[
				"git a",
				"Git: Add..."
			],
			[
				"git his",
				"Git: Diff Current File (Ignore Whitespace)"
			],
			[
				"tab",
				"Indentation: Convert to Tabs"
			],
			[
				"GIT AD",
				"Git: Add..."
			],
			[
				":empty",
				"Snippet: for... empty..."
			],
			[
				"gi add",
				"Git: Add..."
			],
			[
				"terl",
				"TernJS: Rename variable"
			],
			[
				"tern",
				"TernJS: Reload"
			],
			[
				"js",
				"TernJS: Next Occurance"
			],
			[
				"git commit",
				"Git: Commit"
			],
			[
				"space",
				"Indentation: Convert to Spaces"
			],
			[
				":w",
				":w - Save"
			],
			[
				"rename",
				"File: Rename"
			],
			[
				"count",
				"Code Folding: Fold Tag Attributes"
			],
			[
				"git push ",
				"Git: Push"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"remvoe",
				"Package Control: Remove Package"
			],
			[
				"table",
				"Table Editor: Disable 'align_number_right' for current view"
			],
			[
				"pa",
				"Package Control: List Packages"
			],
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"indent",
				"Indentation: Reindent Lines"
			],
			[
				"git commit ",
				"Git: Commit"
			],
			[
				"git add ",
				"Git: Add..."
			],
			[
				":set ",
				"Preferences: Settings - Default"
			],
			[
				"pep8",
				"Snippet: coding: utf-8"
			],
			[
				"spac",
				"Indentation: Convert to Spaces"
			],
			[
				"disab",
				"Package Control: Disable Package"
			],
			[
				"commit",
				"Git: Commit history"
			],
			[
				"djan",
				"Set Syntax: HTML (Django)"
			],
			[
				"gitg",
				"GitGutter: Compare Against Branch"
			],
			[
				"html",
				"Set Syntax: HTML (Django)"
			],
			[
				"inden",
				"Indentation: Reindent Lines"
			],
			[
				"rein",
				"Indentation: Reindent Lines"
			],
			[
				"con",
				"Indentation: Convert to Spaces"
			],
			[
				"ind",
				"Indentation: Reindent Lines"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"ident",
				"SublimeCodeIntel: Reset"
			],
			[
				"inde",
				"Indentation: Reindent Lines"
			],
			[
				"intel",
				"SublimeCodeIntel: Reset"
			],
			[
				"intell",
				"SublimeCodeIntel: Disable Plugin"
			],
			[
				"Package Control: i",
				"Package Control: Discover Packages"
			],
			[
				"Intel",
				"Package Control: Install Package"
			]
		],
		"width": 392.0
	},
	"console":
	{
		"height": 410.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/frederic/dev/trading/siis",
		"/home/frederic/dev/trading/siis/app",
		"/home/frederic/dev/trading/siis/strategy",
		"/home/frederic/dev/trading/siis/strategy/region",
		"/home/frederic/dev/trading/siis/terminal",
		"/home/frederic/dev/trading/siis/trader",
		"/home/frederic/dev/trading/siis/trader/connector"
	],
	"file_history":
	[
		"/home/frederic/dev/trading/siis/trader/connector/binance/trader.py",
		"/home/frederic/dev/trading/siis/trader/trader.py",
		"/home/frederic/dev/trading/siis/watcher/connector/binance/watcher.py",
		"/home/frederic/dev/trading/siis/strategy/strategyindmargintrade.py",
		"/home/frederic/dev/trading/siis/strategy/strategytrade.py",
		"/home/frederic/dev/trading/siis/strategy/tradeop/tradeop.py",
		"/home/frederic/dev/trading/siis/strategy/strategytrader.py",
		"/home/frederic/dev/trading/siis/strategy/strategyassettrade.py",
		"/home/frederic/dev/trading/siis/trader/connector/ig/account.py",
		"/home/frederic/dev/trading/siis/trader/connector/papertrader/account.py",
		"/home/frederic/dev/trading/siis/watcher/connector/onebroker/watcher.py",
		"/home/frederic/dev/trading/siis/trader/order.py",
		"/home/frederic/dev/trading/siis/watcher/connector/ig/watcher.py",
		"/home/frederic/dev/trading/siis/watcher/connector/bitmex/watcher.py",
		"/home/frederic/dev/trading/siis/strategy/cryptoalpha/castrategytrader.py",
		"/home/frederic/dev/trading/siis/strategy/strategy.py",
		"/home/frederic/dev/trading/siis/watcher/position.py",
		"/home/frederic/dev/trading/siis/trader/service.py",
		"/home/frederic/dev/trading/siis/watcher/connector/siis/ohlc.py",
		"/home/frederic/dev/trading/siis/watcher/connector/tiingo/watcher.py",
		"/home/frederic/dev/trading/siis/watcher/connector/siis/price.py",
		"/home/frederic/dev/trading/siis/trader/position.py",
		"/home/frederic/dev/trading/siis/trader/connector/bitmex/trader.py",
		"/home/frederic/dev/trading/siis/trader/connector/papertrader/trader.py",
		"/home/frederic/dev/trading/siis/trader/connector/onebroker/trader.py",
		"/home/frederic/dev/trading/siis/trader/connector/ig/trader.py",
		"/home/frederic/dev/trading/siis/watcher/connector/tradingview/watcher.py",
		"/home/frederic/dev/trading/siis/trader/market.py",
		"/home/frederic/dev/trading/siis/watcher/connector/dummywatcher/watcher.py",
		"/home/frederic/dev/trading/siis/watcher/connector/alphavantage/watcher.py",
		"/home/frederic/dev/trading/siis/strategy/service.py",
		"/home/frederic/dev/trading/siis/strategy/indicealpha/iastrategy.py",
		"/home/frederic/dev/trading/siis/strategy/socialcopy/scstrategy.py",
		"/home/frederic/dev/trading/siis/strategy/boostedblueskyday/bbstrategy.py",
		"/home/frederic/dev/trading/siis/monitor/desktopnotifier.py",
		"/home/frederic/dev/trading/siis/siis.py",
		"/home/frederic/dev/trading/siis/watcher/service.py",
		"/home/frederic/dev/trading/siis/trader/connector/onefox/account.py",
		"/home/frederic/dev/trading/siis/trader/account.py",
		"/home/frederic/dev/trading/siis/trader/connector/bitmex/account.py",
		"/home/frederic/dev/trading/siis/trader/connector/binance/account.py",
		"/home/frederic/.siis/config/appliance.py",
		"/home/frederic/dev/trading/siis/config/appliance.py",
		"/home/frederic/dev/trading/siis/strategy/forexalpha/faparameters.py",
		"/home/frederic/dev/trading/siis/database/database.py",
		"/home/frederic/dev/trading/siis/connector/binance/client.py",
		"/home/frederic/dev/trading/siis/connector/binance/connector.py",
		"/home/frederic/dev/trading/siis/config/config.py",
		"/home/frederic/dev/trading/siis/config/utils.py",
		"/home/frederic/dev/trading/siis/config/identity.py.template",
		"/home/frederic/dev/trading/siis/app/setup.py",
		"/home/frederic/dev/trading/siis/terminal/command.py",
		"/home/frederic/dev/trading/siis/terminal/terminal.py",
		"/home/frederic/dev/trading/siis/app/tradingcommands.py",
		"/home/frederic/.sis",
		"/home/frederic/dev/trading/siis/notifier/signal.py",
		"/home/frederic/dev/trading/siis/strategy/cryptoalpha/castrategy.py",
		"/home/frederic/dev/trading/siis/strategy/bitcoinalpha/bcastrategy.py",
		"/home/frederic/dev/trading/siis/trader/asset.py",
		"/home/frederic/.siis/config/identity.py",
		"/home/frederic/dev/trading/siis/config/identity.py",
		"/home/frederic/dev/trading/siis/strategy/region/__init__.py",
		"/home/frederic/dev/trading/siis/TODO",
		"/home/frederic/dev/trading/siis/scripts/fetch-binance",
		"/home/frederic/dev/trading/siis/scripts/fetch-ig",
		"/home/frederic/dev/trading/siis/scripts/fetch-bitmex",
		"/home/frederic/dev/trading/siis/charting/charting.py",
		"/home/frederic/dev/trading/siis/strategy/crystalball/cbstrategytrader.py",
		"/home/frederic/dev/trading/siis/strategy/forexalpha/fasuba.py",
		"/home/frederic/dev/trading/siis/strategy/forexalpha/fastrategytrader.py",
		"/home/frederic/dev/trading/siis/app/help.py",
		"/home/frederic/dev/trading/siis/app/generalcommands.py",
		"/home/frederic/dev/trading/siis/strategy/tradeop.py",
		"/home/frederic/dev/trading/siis/strategy/tradeop/__init__.py",
		"/home/frederic/dev/trading/siis/common/utils.py",
		"/home/frederic/dev/trading/siis/instrument/instrument.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/sma/sma.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/indicator.py",
		"/home/frederic/.siis/config/config.py",
		"/home/frederic/dev/trading/siis/strategy/forexalpha/fastrategy.py",
		"/home/frederic/dev/trading/siis/strategy/crystalball/cbstrategy.py",
		"/home/frederic/dev/trading/siis/strategy/timeframebasedstrategytrader.py",
		"/home/frederic/dev/trading/siis/strategy/timeframebasedsub.py",
		"/home/frederic/dev/trading/siis/strategy/forexalpha/fasub.py",
		"/home/frederic/dev/trading/siis/strategy/strategymargintrade.py",
		"/home/frederic/dev/trading/igmarkets.txt",
		"/home/frederic/dev/trading/instr.txt",
		"/home/frederic/dev/trading/strategies.rst",
		"/home/frederic/dev/trading/trades.txt",
		"/home/frederic/dev/trading/note.rst",
		"/home/frederic/dev/trading/ohlcig.txt",
		"/home/frederic/dev/trading/siis/connector/ig/lightstreamer.py",
		"/home/frederic/dev/trading/siis/connector/ig/connector.py",
		"/home/frederic/dev/trading/siis/connector/ig/rest.py",
		"/home/frederic/dev/trading/siis/connector/ig/stream.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/atr/atr.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/price/price.py",
		"/home/frederic/dev/trading/siis/help.py",
		"/home/frederic/dev/trading/siis/terminal/generalcommands.py",
		"/home/frederic/dev/trading/siis/terminal/tradingcommands.py",
		"/home/frederic/dev/trading/siis/__init__.py",
		"/home/frederic/dev/trading/siis/monitor/discord.py",
		"/home/frederic/dev/trading/siis/runner.py",
		"/home/frederic/dev/trading/siis/build.sh",
		"/home/frederic/dev/trading/siis/scripts/prefetch-ig",
		"/home/frederic/dev/trading/siis/scripts/prefetch-bitmex",
		"/home/frederic/dev/trading/siis/scripts/prefetch-binance",
		"/home/frederic/dev/trading/siis/setup.py",
		"/home/frederic/dev/trading/siis/README",
		"/home/frederic/dev/trading/siis/strategy/bitcoinalpha/bcastrategytrader.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/bbawe/bbawe.py",
		"/home/frederic/dev/trading/siis/strategy/forexalpha/fasubb.py",
		"/home/frederic/dev/trading/siis/strategy/forexalpha/fasubc.py",
		"/home/frederic/dev/trading/siis/strategy/crystalball/cbsuba.py",
		"/home/frederic/dev/trading/siis/strategy/cryptoalpha/casubc.py",
		"/home/frederic/dev/trading/siis/strategy/cryptoalpha/casubb.py",
		"/home/frederic/dev/trading/siis/strategy/cryptoalpha/casuba.py",
		"/home/frederic/dev/trading/siis/strategy/bitcoinalpha/__pycache__/bcasubb.py",
		"/home/frederic/dev/trading/siis/strategy/bitcoinalpha/bcasubb.py",
		"/home/frederic/dev/trading/siis/strategy/bitcoinalpha/bcasubc.py",
		"/home/frederic/dev/trading/siis/strategy/bitcoinalpha/bcasuba.py",
		"/home/frederic/dev/trading/siis/strategy/cryptoalpha/caparameters2.py",
		"/home/frederic/dev/trading/siis/strategy/cryptoalpha/caparameters.py",
		"/home/frederic/dev/trading/siis/strategy/bitcoinalpha/bcaparameters.py",
		"/home/frederic/dev/trading/siis/strategy/crystalball/cbparameters.py",
		"/home/frederic/dev/trading/siis/strategy/cryptoalpha/casub.py",
		"/home/frederic/dev/trading/siis/strategy/bitcoinalpha/bcasub.py",
		"/home/frederic/dev/trading/siis/strategy/crystalball/cbsub.py"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 143.0,
		"where_history":
		[
			"",
			"*.py",
			"",
			"*.js",
			"*.py",
			"",
			"*.js",
			"",
			"*.py",
			"",
			"*.py",
			"",
			"*.py",
			"*.html",
			"*.py",
			"*.html",
			"*.py",
			"*.*",
			"*.html",
			"*.js",
			"*.py",
			"*.html",
			"",
			"*.html",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"def remove(self, trade)",
			"can_del",
			"\"canceled\"",
			"def remove(",
			"can_delete",
			"_entry_state",
			"cancel_op",
			"can_delete",
			"waiting'",
			"waiting\"",
			"waiting",
			".order_signal(",
			"on_order_canceled",
			"SIGNAL_ORDER_CANCELED",
			"cancel_open",
			"def is_canceled",
			"can_delete",
			"can_del",
			"STATE_CANCELED",
			"'waiting'",
			"\"waiting\"",
			"waiting",
			"wait",
			"\"wait\"",
			"'wait'",
			"can_delete",
			"is_canceled",
			"def can_delete",
			"trade.remove(",
			"is_active",
			"cancel_",
			"lprice",
			"market_or_limit",
			"'method'",
			"cmd_trade_exit",
			"COMMAND_TRADE_EXIT",
			"copied_position_id",
			"ORDER_SHORT",
			"ORDER_LONG",
			"WatcherPo",
			"Watcher",
			"SIGNAL_POSITION_EXIT",
			"position",
			"Position",
			"Author",
			"Position",
			"Order",
			"Position",
			"Author",
			"Position",
			"watcher.position",
			"POSITION_LONG",
			"Order.ORDER_",
			"Position.POSITION_S",
			"Position.POSITION_L",
			"Position.POSITIONL",
			"Position.POSITION",
			"WatcherPosition",
			"TraderPosition",
			"Position",
			"TraderPosition",
			"Position",
			"WatcherPosition",
			"TraderPosition",
			"Position",
			"TraderPosition",
			"WatcherPosition",
			"TraderPosition",
			"Position",
			"Position.POSITION_LONG",
			"Position",
			"Signal",
			"Author",
			"Watcher",
			"Author",
			"Position",
			"Market",
			"Order",
			"Position",
			"WatcherPosition",
			"Position",
			"WatcherPosition",
			"TraderPosition",
			"WatcherPosition.",
			"Position.",
			"TraderPosition",
			"WatcherPosition",
			"LONG",
			"WatcherPosition",
			"Position.",
			"Position",
			"ORDER_SHO",
			"ORDER_LONG",
			"POSITION_SHO",
			"POSITION_LONG",
			"Position",
			"WatcherService",
			"WatcherService\n",
			"Position",
			"watcher.position",
			"Position",
			"Keyed",
			".currency",
			"Currency(",
			"Currency",
			"Author(",
			".comment",
			"Comment(",
			"DummyWatcher",
			"self._currency_ratio",
			"self._currency_display",
			"'binance-signal'",
			"'parameters': {",
			"timefram",
			"options",
			"deep",
			"BTC",
			"'assets'",
			"'currency'",
			"currency",
			"'value-per-pip'",
			"binance-baseusdt",
			"binance-altbtc",
			"'value-per-pip'",
			"\"resolution\"",
			"'resolution",
			"'deep'",
			"self._leverage"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"'atr': ('atr', 14, 1.5),",
			"'pivotpoint': ('pivotpoint', 0,),",
			"'atr': ('atr', 14, 3.0),",
			"'bbawe': ('bbawe', 20, 2.0, 3.0, 5, 34, False),",
			": 38,",
			"'price': ('price', 2,),",
			"ema': ('ema', 8,),",
			"#             'timeframe': ",
			"'timeframe': ",
			"'pivotpoint': ('pivotpoint', 5,),",
			"'ema': ('ema', 3,),",
			"'ema': ('ema', 8,),",
			"'pivotpoint': ('pivotpoint', 3,),",
			"'bollingerbands': ('bollingerbands', 36,),",
			"'bollingerbands': None, # ('bollingerbands', 36,),",
			"'bollingerbands': ('bollingerbands', 36,),",
			"'rsi': ('rsi', 14,),",
			"'ema': ('ema', 5,),",
			"'ema': ('ema', 8,),",
			"'bollingerbands': ('bollingerbands', 21,),",
			"'pivotpoint': ('pivotpoint', 5,),",
			"'ema': ('ema', 10,),",
			"'pivotpoint': ('pivotpoint', 3,),",
			"'pivotpoint': ('pivotpoint', 0,),",
			"_last_ohlcs",
			"_last_ohlc",
			")",
			"http://127.0.0.1:8000",
			"http://127.0.0.1",
			"\\),",
			"INSERT IGNORE ",
			" TRUE,",
			" FALSE,",
			"FALSE,",
			"ezpiclient",
			"TRUE,",
			"FALSE,",
			"",
			"doc",
			", ",
			"(",
			"    VALUES('",
			"VALUES('",
			"'UMR 1095 : GDEC/Génétique Diversité et Ecophysiologie des Céréales (INRA), Centre de recherche de Clermont-Ferrand-Theix, France'",
			"('$2', '$1', '$4', '$3', '$5'),",
			"('$2', '$1', '$4', '$3', '$5'},",
			"{'last_name': '$1', first_name: '$2', team: '$3', email: '$4'},",
			"\n            ",
			"ezpoai.",
			"span.",
			": Element.",
			"'},",
			"    '},",
			"    {'",
			"0",
			"    'id': $1, 'name': $3, 'parent_id': $2, 'color': $4,",
			"    'id': $1, 'name': $2, 'parent_id': 'NULL', 'color': $3,",
			"    'id': $0, 'name': $1, 'parent_id': 'NULL', 'color': $2,",
			"    'id': $1, 'name': $2, 'parent_id': 'NULL', 'color': $3,",
			"    'id': $(1), 'name': $(2), 'parent_id': 'NULL', 'color': $(3),",
			"    'id': %1, 'name': %2, 'parent_id': 'NULL', 'color': %3,",
			")",
			"dlg_offset_position",
			"tmp",
			", '000000'),",
			" , '000000'),",
			"'",
			"'%s'",
			"",
			"),",
			"(2000+$1, ?, \"$2\")",
			"(1000+$1, $2, \"$3\")",
			"($1, \"$2\")",
			"{{STATIC_URL}}",
			"^",
			"",
			"^",
			"10000+",
			"105+",
			"(90+$1, $2, \"$3\"),",
			"($1, $2, \"$3\"),",
			"(\"$2\"),",
			"($1, \"$2\"),",
			"($1, $2),",
			"($1, $2)",
			"",
			"cismotif_details_panel",
			"profile_logout",
			"profile_sign_up",
			"profile_sign_in",
			"is_authenticated()",
			"{% url 'promoteranalysis:' %}",
			"{{url}}",
			"{% url %}",
			"{{url}}",
			"success"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 8,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "app/generalcommands.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2561,
						"regions":
						{
						},
						"selection":
						[
							[
								2321,
								2321
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 892.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "app/tradingcommands.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16394,
						"regions":
						{
						},
						"selection":
						[
							[
								4948,
								4948
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1777.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "strategy/strategy.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 64270,
						"regions":
						{
						},
						"selection":
						[
							[
								39693,
								39693
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 15563.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "strategy/strategytrader.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24670,
						"regions":
						{
						},
						"selection":
						[
							[
								19773,
								19773
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6933.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "strategy/strategyassettrade.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13495,
						"regions":
						{
						},
						"selection":
						[
							[
								3387,
								3387
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1776.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "strategy/strategyindmargintrade.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19591,
						"regions":
						{
						},
						"selection":
						[
							[
								6988,
								6988
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 592.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "strategy/strategymargintrade.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20725,
						"regions":
						{
						},
						"selection":
						[
							[
								3383,
								3383
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 939.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "strategy/strategytrade.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15191,
						"regions":
						{
						},
						"selection":
						[
							[
								5618,
								5618
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2212.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1059,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										154,
										161
									],
									[
										408,
										415
									],
									[
										613,
										620
									],
									[
										889,
										896
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								982,
								982
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 465.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "siis.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24992,
						"regions":
						{
						},
						"selection":
						[
							[
								13424,
								13424
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5617.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "strategy/cryptoalpha/caparameters2.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8649,
						"regions":
						{
						},
						"selection":
						[
							[
								4807,
								4807
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1585.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "strategy/cryptoalpha/caparameters.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8740,
						"regions":
						{
						},
						"selection":
						[
							[
								786,
								786
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "strategy/cryptoalpha/casuba.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37781,
						"regions":
						{
						},
						"selection":
						[
							[
								16134,
								16134
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4800.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "TODO",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6783,
						"regions":
						{
						},
						"selection":
						[
							[
								1934,
								1934
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "strategy/region/region.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1469,
						"regions":
						{
						},
						"selection":
						[
							[
								533,
								533
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 247.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 41.0
	},
	"input":
	{
		"height": 41.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.anaconda_documentation":
	{
		"height": 112.0
	},
	"output.exec":
	{
		"height": 287.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 112.0
	},
	"output.rope_python_documentation":
	{
		"height": 112.0
	},
	"pinned_build_system": "",
	"project": "siis.sublime-project",
	"replace":
	{
		"height": 98.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"trader",
				"trader/connector/binance/trader.py"
			],
			[
				"margin",
				"strategy/strategyindmargintrade.py"
			],
			[
				"yass",
				"strategy/strategyassettrade.py"
			],
			[
				"ytra",
				"strategy/strategytrade.py"
			],
			[
				"siis",
				"siis.py"
			],
			[
				"ytrade",
				"strategy/strategytrade.py"
			],
			[
				"ytr",
				"strategy/strategytrade.py"
			],
			[
				"yasset",
				"strategy/strategyassettrade.py"
			],
			[
				"assettr",
				"strategy/strategyassettrade.py"
			],
			[
				"ytrad",
				"strategy/strategytrade.py"
			],
			[
				"trad",
				"app/tradingcommands.py"
			],
			[
				"account",
				"trader/connector/ig/account.py"
			],
			[
				"order",
				"trader/order.py"
			],
			[
				"posi",
				"watcher/position.py"
			],
			[
				"ord",
				"trader/order.py"
			],
			[
				"pos",
				"trader/position.py"
			],
			[
				"accou",
				"trader/connector/onefox/account.py"
			],
			[
				"",
				"~/.siis/config/appliance.py"
			],
			[
				"acc",
				"trader/connector/binance/account.py"
			],
			[
				"fap",
				"strategy/forexalpha/faparameters.py"
			],
			[
				"fapar",
				"strategy/forexalpha/faparameters.py"
			],
			[
				"strateg",
				"strategy/strategy.py"
			],
			[
				"fapa",
				"strategy/forexalpha/faparameters.py"
			],
			[
				"ser",
				"trader/service.py"
			],
			[
				"binac",
				"connector/binance/client.py"
			],
			[
				"conn",
				"connector/binance/connector.py"
			],
			[
				"data",
				"database/database.py"
			],
			[
				"ohlc",
				"watcher/connector/siis/ohlc.py"
			],
			[
				"util",
				"config/utils.py"
			],
			[
				"id",
				"config/identity.py.template"
			],
			[
				"setup",
				"app/setup.py"
			],
			[
				"sii",
				"siis.py"
			],
			[
				"ter",
				"terminal/terminal.py"
			],
			[
				"comm",
				"terminal/command.py"
			],
			[
				"gee",
				"app/generalcommands.py"
			],
			[
				"termi",
				"terminal/terminal.py"
			],
			[
				"servic",
				"strategy/service.py"
			],
			[
				"stra",
				"strategy/strategy.py"
			],
			[
				"command",
				"app/tradingcommands.py"
			],
			[
				"castra",
				"strategy/cryptoalpha/castrategytrader.py"
			],
			[
				"castr",
				"strategy/cryptoalpha/castrategy.py"
			],
			[
				"capr",
				"strategy/cryptoalpha/caparameters.py"
			],
			[
				"capar",
				"strategy/cryptoalpha/caparameters2.py"
			],
			[
				"castrat",
				"strategy/cryptoalpha/castrategy.py"
			],
			[
				"casuba",
				"strategy/cryptoalpha/casuba.py"
			],
			[
				"ca",
				"strategy/cryptoalpha/castrategytrader.py"
			],
			[
				"app",
				"config/appliance.py"
			],
			[
				"tradeop",
				"strategy/tradeop/tradeop.py"
			],
			[
				"term",
				"terminal/terminal.py"
			],
			[
				"conne",
				"connector/binance/connector.py"
			],
			[
				"ass",
				"trader/asset.py"
			],
			[
				"ide",
				"config/identity.py"
			],
			[
				"tra",
				"app/tradingcommands.py"
			],
			[
				"todo",
				"TODO"
			],
			[
				"assett",
				"strategy/strategyassettrade.py"
			],
			[
				"bin",
				"scripts/fetch-binance"
			],
			[
				"ig",
				"scripts/fetch-ig"
			],
			[
				"mar",
				"trader/market.py"
			],
			[
				"mark",
				"trader/market.py"
			],
			[
				"bitm",
				"scripts/fetch-bitmex"
			],
			[
				"straty",
				"strategy/strategy.py"
			],
			[
				"chart",
				"charting/charting.py"
			],
			[
				"com",
				"app/tradingcommands.py"
			],
			[
				"help",
				"app/help.py"
			],
			[
				"ytrader",
				"strategy/strategytrader.py"
			],
			[
				"trading",
				"app/tradingcommands.py"
			],
			[
				"in",
				"instrument/instrument.py"
			],
			[
				"comman",
				"app/tradingcommands.py"
			],
			[
				"trado",
				"strategy/tradeop.py"
			],
			[
				"sma",
				"strategy/indicator/sma/sma.py"
			],
			[
				"indic",
				"strategy/indicator/indicator.py"
			],
			[
				"conf",
				"config/config.py"
			],
			[
				"serv",
				"strategy/service.py"
			],
			[
				"servi",
				"strategy/service.py"
			],
			[
				"fetig",
				"scripts/fetch-ig"
			],
			[
				"bina",
				"scripts/fetch-binance"
			],
			[
				"fetc",
				"scripts/fetch-ig"
			],
			[
				"te",
				"terminal/terminal.py"
			],
			[
				"inst",
				"instrument/instrument.py"
			],
			[
				"strategy.py",
				"strategy/strategy.py"
			],
			[
				"orde",
				"trader/order.py"
			],
			[
				"watcher",
				"watcher/connector/binance/watcher.py"
			],
			[
				"asset",
				"trader/asset.py"
			],
			[
				"btstr",
				"strategy/bitcoinalpha/bcastrategy.py"
			],
			[
				"fast",
				"strategy/forexalpha/fastrategy.py"
			],
			[
				"fastr",
				"strategy/forexalpha/fastrategy.py"
			],
			[
				"st",
				"strategy/strategy.py"
			],
			[
				"cbstr",
				"strategy/crystalball/cbstrategy.py"
			],
			[
				"faytra",
				"strategy/forexalpha/fastrategytrader.py"
			],
			[
				"fapra",
				"strategy/forexalpha/faparameters.py"
			],
			[
				"timef",
				"strategy/timeframebasedstrategytrader.py"
			],
			[
				"fasuba",
				"strategy/forexalpha/fasuba.py"
			],
			[
				"bit",
				"scripts/fetch-bitmex"
			],
			[
				"fet",
				"scripts/fetch-ig"
			],
			[
				"str",
				"strategy/strategy.py"
			],
			[
				"gener",
				"app/generalcommands.py"
			],
			[
				"genr",
				"app/generalcommands.py"
			],
			[
				"comma",
				"app/generalcommands.py"
			],
			[
				"gne",
				"app/generalcommands.py"
			],
			[
				"desk",
				"monitor/desktopnotifier.py"
			],
			[
				"utils",
				"common/utils.py"
			],
			[
				"y.py",
				"strategy/strategy.py"
			],
			[
				"margintr",
				"strategy/strategymargintrade.py"
			],
			[
				"tod",
				"TODO"
			],
			[
				"fa",
				"strategy/forexalpha/fastrategytrader.py"
			],
			[
				"strt",
				"strategy/strategy.py"
			],
			[
				"instr",
				"instrument/instrument.py"
			],
			[
				"indmar",
				"strategy/strategyindmargintrade.py"
			],
			[
				"margint",
				"strategy/strategymargintrade.py"
			],
			[
				"indm",
				"strategy/strategyindmargintrade.py"
			],
			[
				"price",
				"strategy/indicator/price/price.py"
			],
			[
				"strat",
				"strategy/crystalball/cbstrategytrader.py"
			],
			[
				"runn",
				"runner.py"
			],
			[
				"papertr",
				"trader/connector/papertrader/trader.py"
			],
			[
				"yrta",
				"strategy/strategytrade.py"
			],
			[
				"indma",
				"strategy/strategyindmargintrade.py"
			],
			[
				"market",
				"trader/market.py"
			],
			[
				"marg",
				"strategy/strategymargintrade.py"
			],
			[
				"marke",
				"trader/market.py"
			],
			[
				"strategytrader",
				"strategy/strategytrader.py"
			],
			[
				"strategytra",
				"strategy/strategytrade.py"
			],
			[
				"isntr",
				"instrument/instrument.py"
			],
			[
				"isnt",
				"instrument/instrument.py"
			],
			[
				"runner",
				"runner.py"
			],
			[
				"dat",
				"database/database.py"
			],
			[
				"bca",
				"strategy/bitcoinalpha/bcaparameters.py"
			],
			[
				"cbpa",
				"strategy/crystalball/cbparameters.py"
			],
			[
				"pref",
				"scripts/prefetch-binance"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/dev/plantpad/master/plantpad.sublime-workspace"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Affix"
			]
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				1
			]
		]
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 280.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
