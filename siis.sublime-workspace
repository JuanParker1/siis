{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Li",
				"LimitIfTouched"
			],
			[
				"Mar",
				"MarketIfTouched"
			],
			[
				"order",
				"order_price"
			],
			[
				"stop",
				"stopPx"
			],
			[
				"trig",
				"trigger_price"
			],
			[
				"sto",
				"stopPx"
			],
			[
				"or",
				"ordType"
			],
			[
				"trg",
				"trigger_price"
			],
			[
				"orde",
				"order_price"
			],
			[
				"order_",
				"order_price"
			],
			[
				"ORDER_TA",
				"ORDER_TAKE_PROFIT_LIMIT"
			],
			[
				"__e",
				"__exec_ind_margin_order"
			],
			[
				"__ex",
				"__exec_margin_order"
			],
			[
				"__exe",
				"__exec_buysell_order"
			],
			[
				"open",
				"open_exec_price"
			],
			[
				"ORDER_T",
				"ORDER_TAKE_PROFIT_LIMIT"
			],
			[
				"app",
				"append"
			],
			[
				"ORD",
				"ORDER_MARKET"
			],
			[
				"time",
				"timestamp"
			],
			[
				"tim",
				"timeframe"
			],
			[
				"upd",
				"update_sl"
			],
			[
				"limt",
				"limit_oid"
			],
			[
				"ref",
				"limit_ref_oid"
			],
			[
				"has",
				"has_limit_order"
			],
			[
				"has_t",
				"has_limit_order"
			],
			[
				"adj",
				"adjust_price"
			],
			[
				"times",
				"timestamp"
			],
			[
				"modif",
				"modify_stop_loss"
			],
			[
				"del",
				"delta_time"
			],
			[
				"slt",
				"sltp_max_rate"
			],
			[
				"num",
				"num_orders"
			],
			[
				"sltp_",
				"sltp_max_timeframe"
			],
			[
				"last_so",
				"last_stop_loss"
			],
			[
				"last",
				"last_sl_ot"
			],
			[
				"tp",
				"tp_created"
			],
			[
				"exit",
				"exit_trades"
			],
			[
				"piv",
				"pivot"
			],
			[
				"has_",
				"has_stop_order"
			],
			[
				"clos",
				"close_exec_price"
			],
			[
				"upda",
				"update_tp"
			],
			[
				"take",
				"take_profit"
			],
			[
				"is_cl",
				"is_closing"
			],
			[
				"mar",
				"market_id"
			],
			[
				"mod",
				"modify_take_profit"
			],
			[
				"_tr",
				"_trader_conf"
			],
			[
				"XBT",
				"XBTU19"
			],
			[
				"_pr",
				"_profit_loss_market_rate"
			],
			[
				"_prof",
				"_profit_loss_market"
			],
			[
				"_pro",
				"_profit_loss_rate"
			],
			[
				"profit",
				"profit-loss"
			],
			[
				"limi",
				"limit_oid"
			],
			[
				"lim",
				"_limit_oid"
			],
			[
				"sell_o",
				"sell_oid"
			],
			[
				"dir",
				"direction"
			],
			[
				"T",
				"TradeOp"
			],
			[
				"_c",
				"_count"
			],
			[
				"reta",
				"retained_exit"
			],
			[
				"bu",
				"buy_oid"
			],
			[
				"STATE_",
				"STATE_FILLED"
			],
			[
				"in",
				"instrument"
			],
			[
				"_la",
				"_prev_lead_sine"
			],
			[
				"_las",
				"_last_lead_sine"
			],
			[
				"_le",
				"_lead_sines"
			],
			[
				"SINE",
				"ta_SINE"
			],
			[
				"_pre",
				"_prev_lead_sine"
			],
			[
				"pos",
				"position_data"
			],
			[
				"err",
				"error_file_logger"
			],
			[
				"exe",
				"exec_file_logger"
			],
			[
				"DE",
				"DEBUG"
			],
			[
				"fil",
				"file_logger"
			],
			[
				"W",
				"WHITE"
			],
			[
				"quote",
				"quote_display"
			],
			[
				"id",
				"identifier"
			],
			[
				"acc",
				"account"
			],
			[
				"_l",
				"_last_update_time"
			],
			[
				"trad",
				"trader_service"
			],
			[
				"st",
				"strategy"
			],
			[
				"tre",
				"trend-region"
			],
			[
				"tic",
				"tick_size"
			],
			[
				"ad",
				"adjusted_price"
			],
			[
				"one",
				"one_pip_means"
			],
			[
				"_vo",
				"_vol24h_base"
			],
			[
				"_vol",
				"_vol24h_quote"
			],
			[
				"_mar",
				"_market_ofr"
			],
			[
				"_m",
				"_market_bid"
			],
			[
				"_ma",
				"_market_id"
			],
			[
				"_sc",
				"_scalar"
			],
			[
				"_scr",
				"_score_accum"
			],
			[
				"_r",
				"_regression_factor"
			],
			[
				"_da",
				"_data2"
			],
			[
				"_dat",
				"_data1"
			],
			[
				"_d",
				"_d2"
			],
			[
				"_i",
				"_ind2"
			],
			[
				"_to",
				"_top"
			],
			[
				"_bo",
				"_bottom"
			],
			[
				"_top",
				"_top_partial_interp"
			],
			[
				"_a",
				"_last_d"
			],
			[
				"_len",
				"_len_K"
			],
			[
				"pre",
				"prev_high"
			],
			[
				"buy",
				"buy_ref_oid"
			],
			[
				"_qu",
				"_quote_precision"
			],
			[
				"lat",
				"last_update_time"
			],
			[
				"curre",
				"currency"
			],
			[
				"bas",
				"base_exchange_rate"
			],
			[
				"_hi",
				"_high_a"
			],
			[
				"_lo",
				"_low_a"
			],
			[
				"timef",
				"timeframe"
			],
			[
				"exp",
				"expiry"
			],
			[
				"_hig",
				"_high_a"
			],
			[
				"sta",
				"startswith"
			],
			[
				"_re",
				"_created"
			],
			[
				"_low",
				"_low_a"
			],
			[
				"low",
				"_low_b"
			],
			[
				"par",
				"params"
			],
			[
				"cls",
				"classmethod"
			],
			[
				"Stra",
				"StrategyTrade"
			],
			[
				"limit-or",
				"limit-order-qty"
			],
			[
				"stop-o",
				"stop-order-qty"
			],
			[
				"creat",
				"create-ref-oid"
			],
			[
				"sell_or",
				"sell_order_qty"
			],
			[
				"sell-o",
				"sell-order-type"
			],
			[
				"co",
				"connector"
			],
			[
				"broker",
				"broker_id"
			],
			[
				"ac",
				"account_id"
			],
			[
				"pro",
				"profit_loss_alt"
			],
			[
				"alt",
				"alt_currency"
			],
			[
				"prof",
				"profit_loss"
			],
			[
				"change_",
				"change_percent"
			]
		]
	},
	"buffers":
	[
		{
			"file": "strategy/bitcoinalpha/bcastrategytrader.py",
			"settings":
			{
				"buffer_size": 30072,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "trader/connector/papertrader/trader.py",
			"settings":
			{
				"buffer_size": 86485,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 260 files for \".order_price\" (case sensitive)\n\n/home/frederic/dev/trading/siis/strategy/strategy.py:\n 1205                          'ts': trade.entry_open_time,\n 1206                          'd': trade.direction_to_str(),\n 1207:                         'l': market.format_price(trade.order_price),\n 1208                          'p': market.format_price(trade.entry_price),\n 1209                          'q': market.format_quantity(trade.order_quantity),\n\n/home/frederic/dev/trading/siis/strategy/strategyassettrade.py:\n   50          order = Order(trader, market_id)\n   51          order.direction = direction\n   52:         order.order_price = order_price\n   53          order.order_type = order_type\n   54          order.quantity = quantity\n   ..\n   66          self.dir = order.direction\n   67  \n   68:         self.op = order.order_price  # retains the order price\n   69          self.oq = order.quantity     # ordered quantity\n   70  \n   ..\n  155              order.direction = -self.dir  # neg dir\n  156              order.order_type = Order.ORDER_LIMIT\n  157:             order.order_price = price\n  158              order.quantity = self.e - self.x  # remaining\n  159  \n  ...\n  203              order.direction = -self.dir  # neg dir\n  204              order.order_type = Order.ORDER_STOP\n  205:             order.order_price = price\n  206              order.quantity = self.e - self.x  # remaining\n  207  \n\n/home/frederic/dev/trading/siis/strategy/strategyindmargintrade.py:\n   53          order = Order(trader, market_id)\n   54          order.direction = direction\n   55:         order.order_price = order_price\n   56          order.order_type = order_type\n   57          order.quantity = quantity\n   ..\n   64          self.dir = order.direction\n   65  \n   66:         self.op = order.order_price  # retains the order price\n   67          self.oq = order.quantity     # ordered quantity\n   68  \n   ..\n  165              order.reduce_only = True  # (not for now because it implies to have the filled qty, and so need to update each time trade qty is updated)\n  166              order.quantity = self.e - self.x  # remaining\n  167:             order.order_price = price\n  168  \n  169              trader.set_ref_order_id(order)\n  ...\n  201              order.reduce_only = True\n  202              order.quantity = self.e - self.x  # remaining\n  203:             order.order_price = price\n  204  \n  205              trader.set_ref_order_id(order)\n\n/home/frederic/dev/trading/siis/strategy/strategymargintrade.py:\n   50          order = Order(trader, market_id)\n   51          order.direction = direction\n   52:         order.order_price = order_price\n   53          order.order_type = order_type\n   54          order.quantity = quantity\n   ..\n   64          self.dir = order.direction\n   65  \n   66:         self.op = order.order_price  # retains the order price\n   67          self.oq = order.quantity     # ordered quantity\n   68  \n   ..\n  181              order.reduce_only = True\n  182              order.quantity = self.e - self.x  # remaining\n  183:             order.order_price = price\n  184  \n  185              trader.set_ref_order_id(order)\n  ...\n  232              order.reduce_only = True\n  233              order.quantity = self.e - self.x  # remaining\n  234:             order.order_price = price\n  235  \n  236              trader.set_ref_order_id(order)\n\n/home/frederic/dev/trading/siis/strategy/boostedblueskyday/bbstrategy.py:\n  360                  order = Order(trader, instrument.market_id)\n  361                  order.direction = direction\n  362:                 order.order_price = last_prices[-1]\n  363  \n  364                  # depends of the instrument and the account, and not always necessary, but always in paper trader\n\n/home/frederic/dev/trading/siis/trader/trader.py:\n  888  \n  889              # depending of the type\n  890:             order.order_price = order_data.get('order-price')\n  891              order.trigger_price = order_data.get('trigger-price')\n  892              order.time_in_force = order_data.get('time-in-force')\n  ...\n  907              order.quantity = order_data['quantity']\n  908  \n  909:             order.order_price = order_data.get('order-price')\n  910              order.trigger_price = order_data.get('trigger-price')\n  911  \n\n/home/frederic/dev/trading/siis/trader/connector/binance/trader.py:\n  226          # quantity = market.format_quantity(market.adjust_quantity(order.quantity))\n  227          quantity = market.adjust_quantity(order.quantity)\n  228:         notional = quantity * (order.order_price or market.ofr)\n  229  \n  230          if notional < market.min_notional:\n  ...\n  245          # limit order need timeInForce\n  246          if order.order_type == Order.ORDER_LIMIT:\n  247:             data['price'] = market.format_price(order.order_price)\n  248              data['timeInForce'] = time_in_force\n  249          elif order.order_type == Order.ORDER_STOP:\n  250:             data['stopPrice'] = market.format_price(order.order_price)\n  251          elif order.order_type == Order.ORDER_STOP_LIMIT:\n  252:             data['price'] = market.format_price(order.order_price)\n  253              data['stopPrice'] = market.format_price(order.trigger_price)\n  254              data['timeInForce'] = time_in_force\n  255          elif order.order_type == Order.ORDER_TAKE_PROFIT:\n  256:             data['stopPrice'] = market.format_price(order.order_price)\n  257          elif order.order_type == Order.ORDER_TAKE_PROFIT_LIMIT:\n  258:             data['price'] = market.format_price(order.order_price)\n  259              data['stopPrice'] = market.format_price(order.trigger_price)\n  260              data['timeInForce'] = time_in_force\n  ...\n  874                  if data['type'] == 'LIMIT':\n  875                      order.order_type = Order.ORDER_LIMIT\n  876:                     order.order_price = data['price']\n  877                  elif data['type'] == 'LIMIT_MAKER':\n  878                      order.order_type = Order.ORDER_LIMIT # _MAKER\n  879:                     order.order_price = data['price']\n  880                  elif data['type'] == 'MARKET':\n  881                      order.order_type = Order.ORDER_MARKET\n  882                  elif data['type'] == 'STOP_LOSS':\n  883                      order.order_type = Order.ORDER_STOP\n  884:                     order.order_price = data['stopPrice']\n  885                  elif data['type'] == 'STOP_LOSS_LIMIT':\n  886                      order.order_type = Order.ORDER_STOP_LIMIT\n  887:                     order.order_price = data['price']\n  888                      order.trigger_price = data['stopPrice']\n  889                  elif data['type'] == 'TAKE_PROFIT':\n  890                      order.order_type = Order.ORDER_TAKE_PROFIT\n  891:                     order.order_price = data['stopPrice']\n  892                  elif data['type'] == 'TAKE_PROFIT_LIMIT':\n  893                      order.order_type = Order.ORDER_TAKE_PROFIT_LIMIT\n  894:                     order.order_price = data['price']\n  895                      order.trigger_price = data['stopPrice']\n  896  \n  ...\n 1105  \n 1106              order.quantity = data['quantity']\n 1107:             order.order_price = data['order-price']\n 1108              order.stop_loss = data['stop-loss']\n 1109  \n\n/home/frederic/dev/trading/siis/trader/connector/bitmex/trader.py:\n  234              postdict['ordType'] = 'Limit'\n  235              postdict['orderQty'] = qty\n  236:             postdict['price'] = order.order_price\n  237  \n  238              # only possible with limit order\n  ...\n  243              postdict['ordType'] = 'Stop'\n  244              postdict['orderQty'] = qty\n  245:             postdict['stopPx'] = order.order_price\n  246  \n  247          elif order.order_type == Order.ORDER_STOP_LIMIT:\n  ...\n  249              postdict['orderQty'] = qty\n  250              postdict['stopPx'] = order.trigger_price\n  251:             postdict['price'] = order.order_price\n  252  \n  253          elif order.order_type == Order.ORDER_TAKE_PROFIT:\n  254              postdict['ordType'] = 'MarketIfTouched'\n  255              postdict['orderQty'] = qty\n  256:             postdict['stopPx'] = order.order_price\n  257  \n  258          elif order.order_type == Order.ORDER_TAKE_PROFIT_LIMIT:\n  ...\n  260              postdict['orderQty'] = qty\n  261              postdict['stopPx'] = order.trigger_price\n  262:             postdict['price'] = order.order_price\n  263  \n  264          else:\n  ...\n  277              postdict['execInst'] = ','.join(exec_inst)\n  278  \n  279:         logger.info(\"Trader %s order %s %s @%s %s\" % (self.name, order.direction_to_str(), order.symbol, order.order_price, order.quantity))\n  280  \n  281          try:\n  ...\n  387          else:\n  388              order.order_type = Order.ORDER_LIMIT\n  389:             order.order_price = limit_price\n  390  \n  391              postdict['ordType'] = \"Limit\"\n  392:             postdict['price'] = order.order_price\n  393              postdict['orderQty'] = qty\n  394  \n  ...\n  599              elif src_order['ordType'] == \"Limit\":\n  600                  order.order_type = Order.ORDER_LIMIT\n  601:                 order.order_price = src_order.get('price')\n  602              elif src_order['ordType'] == \"Stop\":\n  603                  order.order_type = Order.ORDER_STOP\n  604:                 order.order_price = src_order.get('stopPx')\n  605              else:\n  606                  # stop limit, trigger marke, tripgger limit\n\n/home/frederic/dev/trading/siis/trader/connector/onebroker/trader.py:\n  267          }\n  268  \n  269:         if order.order_price:\n  270:             var['order_type_parameter'] = order.order_price  # can be null for market\n  271  \n  272          if order.stop_loss:\n\n/home/frederic/dev/trading/siis/trader/connector/papertrader/trader.py:\n  557  \n  558                  if order.order_type == Order.ORDER_LIMIT:\n  559:                     if (order.direction == Position.LONG and open_exec_price <= order.order_price) or \n  560:                        (order.direction == Position.SHORT and open_exec_price >= order.order_price):\n  561  \n  562                          if market.trade == market.TRADE_BUY_SELL:\n  ...\n  572                  elif order.order_type == Order.ORDER_STOP:\n  573                      # opposite trigger + market\n  574:                     if (order.direction == Position.LONG and close_exec_price <= order.order_price) or \n  575:                        (order.direction == Position.SHORT and close_exec_price >= order.order_price):\n  576  \n  577                          if market.trade == market.TRADE_BUY_SELL:\n  ...\n  639  \n  640          if order.order_type in (Order.ORDER_LIMIT, Order.ORDER_STOP_LIMIT, Order.ORDER_TAKE_PROFIT_LIMIT):\n  641:             bid_price = order.order_price\n  642:             ofr_price = order.order_price\n  643  \n  644          elif order.order_type in (Order.ORDER_MARKET, Order.ORDER_STOP, Order.ORDER_TAKE_PROFIT):\n  ...\n  728              if market and limit_price:\n  729                  order.order_type = Order.ORDER_LIMIT\n  730:                 order.order_price = limit_price\n  731              else:\n  732                  order.order_type = Order.ORDER_MARKET\n  ...\n  751              if order.order_type == Order.ORDER_LIMIT:\n  752                  # @todo limit execution when limit reach bid or ofr price (depend of the direction)\n  753:                 bid_price = order.order_price\n  754:                 ofr_price = order.order_price\n  755  \n  756              elif order.order_type == Order.ORDER_MARKET:\n  ...\n 1011                  'timestamp': order.transact_time,\n 1012                  'quantity': order.quantity,\n 1013:                 'order-price': order.order_price,\n 1014                  'stop-loss': order.stop_loss,\n 1015                  'take-profit': order.take_profit,\n ....\n 1028                  'timestamp': order.transact_time,\n 1029                  'quantity': order.quantity,\n 1030:                 'order-price': order.order_price,\n 1031                  'exec-price': open_exec_price,\n 1032                  'filled': base_qty,\n ....\n 1115                  'timestamp': order.transact_time,\n 1116                  'quantity': order.quantity,\n 1117:                 'order-price': order.order_price,\n 1118                  'stop-loss': order.stop_loss,\n 1119                  'take-profit': order.take_profit,\n ....\n 1132                  'timestamp': order.transact_time,\n 1133                  'quantity': order.quantity,\n 1134:                 'order-price': order.order_price,\n 1135                  'exec-price': close_exec_price,\n 1136                  'filled': base_qty,\n ....\n 1316              margin_factor = market.margin_factor\n 1317  \n 1318:             # logger.debug(order.symbol, bid_price, ofr_price, open_exec_price, close_exec_price, delta_price, current_position.entry_price, order.order_price)\n 1319              realized_position_cost = 0.0  # realized cost of the position in base currency\n 1320  \n ....\n 1474                  'timestamp': order.transact_time,\n 1475                  'quantity': order.quantity,\n 1476:                 'order-price': order.order_price,\n 1477                  'stop-loss': order.stop_loss,\n 1478                  'take-profit': order.take_profit,\n ....\n 1491                  'timestamp': order.transact_time,\n 1492                  'quantity': order.quantity,\n 1493:                 'order-price': order.order_price,\n 1494                  'exec-price': exec_price,\n 1495                  'avg-price': current_position.entry_price,\n ....\n 1636                  'timestamp': order.transact_time,\n 1637                  'quantity': order.quantity,\n 1638:                 'order-price': order.order_price,\n 1639                  'stop-loss': order.stop_loss,\n 1640                  'take-profit': order.take_profit,\n ....\n 1653                  'timestamp': order.transact_time,\n 1654                  'quantity': order.quantity,\n 1655:                 'order-price': order.order_price,\n 1656                  'exec-price': position.entry_price,\n 1657                  'avg-price': position.entry_price,\n ....\n 1742              margin_factor = market.margin_factor\n 1743  \n 1744:             # logger.debug(order.symbol, bid_price, ofr_price, open_exec_price, close_exec_price, delta_price, current_position.entry_price, order.order_price)\n 1745              realized_position_cost = 0.0  # realized cost of the position in base currency\n 1746  \n ....\n 1900                  'timestamp': order.transact_time,\n 1901                  'quantity': order.quantity,\n 1902:                 'order-price': order.order_price,\n 1903                  'stop-loss': order.stop_loss,\n 1904                  'take-profit': order.take_profit,\n ....\n 1917                  'timestamp': order.transact_time,\n 1918                  'quantity': order.quantity,\n 1919:                 'order-price': order.order_price,\n 1920                  'exec-price': exec_price,\n 1921                  'avg-price': current_position.entry_price,\n ....\n 2062                  'timestamp': order.transact_time,\n 2063                  'quantity': order.quantity,\n 2064:                 'order-price': order.order_price,\n 2065                  'stop-loss': order.stop_loss,\n 2066                  'take-profit': order.take_profit,\n ....\n 2079                  'timestamp': order.transact_time,\n 2080                  'quantity': order.quantity,\n 2081:                 'order-price': order.order_price,\n 2082                  'exec-price': position.entry_price,\n 2083                  'avg-price': position.entry_price,\n\n64 matches across 10 files\n\n\nSearching 260 files for \".order_price\" (case sensitive)\n\n/home/frederic/dev/trading/siis/strategy/strategy.py:\n 1205                          'ts': trade.entry_open_time,\n 1206                          'd': trade.direction_to_str(),\n 1207:                         'l': market.format_price(trade.order_price),\n 1208                          'p': market.format_price(trade.entry_price),\n 1209                          'q': market.format_quantity(trade.order_quantity),\n\n/home/frederic/dev/trading/siis/strategy/strategyassettrade.py:\n   50          order = Order(trader, market_id)\n   51          order.direction = direction\n   52:         order.order_price = order_price\n   53          order.order_type = order_type\n   54          order.quantity = quantity\n   ..\n   66          self.dir = order.direction\n   67  \n   68:         self.op = order.order_price  # retains the order price\n   69          self.oq = order.quantity     # ordered quantity\n   70  \n   ..\n  155              order.direction = -self.dir  # neg dir\n  156              order.order_type = Order.ORDER_LIMIT\n  157:             order.order_price = price\n  158              order.quantity = self.e - self.x  # remaining\n  159  \n  ...\n  203              order.direction = -self.dir  # neg dir\n  204              order.order_type = Order.ORDER_STOP\n  205:             order.order_price = price\n  206              order.quantity = self.e - self.x  # remaining\n  207  \n\n/home/frederic/dev/trading/siis/strategy/strategyindmargintrade.py:\n   53          order = Order(trader, market_id)\n   54          order.direction = direction\n   55:         order.order_price = order_price\n   56          order.order_type = order_type\n   57          order.quantity = quantity\n   ..\n   64          self.dir = order.direction\n   65  \n   66:         self.op = order.order_price  # retains the order price\n   67          self.oq = order.quantity     # ordered quantity\n   68  \n   ..\n  165              order.reduce_only = True  # (not for now because it implies to have the filled qty, and so need to update each time trade qty is updated)\n  166              order.quantity = self.e - self.x  # remaining\n  167:             order.order_price = price\n  168  \n  169              trader.set_ref_order_id(order)\n  ...\n  201              order.reduce_only = True\n  202              order.quantity = self.e - self.x  # remaining\n  203:             order.order_price = price\n  204  \n  205              trader.set_ref_order_id(order)\n\n/home/frederic/dev/trading/siis/strategy/strategymargintrade.py:\n   50          order = Order(trader, market_id)\n   51          order.direction = direction\n   52:         order.order_price = order_price\n   53          order.order_type = order_type\n   54          order.quantity = quantity\n   ..\n   64          self.dir = order.direction\n   65  \n   66:         self.op = order.order_price  # retains the order price\n   67          self.oq = order.quantity     # ordered quantity\n   68  \n   ..\n  181              order.reduce_only = True\n  182              order.quantity = self.e - self.x  # remaining\n  183:             order.order_price = price\n  184  \n  185              trader.set_ref_order_id(order)\n  ...\n  232              order.reduce_only = True\n  233              order.quantity = self.e - self.x  # remaining\n  234:             order.order_price = price\n  235  \n  236              trader.set_ref_order_id(order)\n\n/home/frederic/dev/trading/siis/strategy/boostedblueskyday/bbstrategy.py:\n  360                  order = Order(trader, instrument.market_id)\n  361                  order.direction = direction\n  362:                 order.order_price = last_prices[-1]\n  363  \n  364                  # depends of the instrument and the account, and not always necessary, but always in paper trader\n\n/home/frederic/dev/trading/siis/trader/trader.py:\n  888  \n  889              # depending of the type\n  890:             order.order_price = order_data.get('order-price')\n  891              order.trigger_price = order_data.get('trigger-price')\n  892              order.time_in_force = order_data.get('time-in-force')\n  ...\n  907              order.quantity = order_data['quantity']\n  908  \n  909:             order.order_price = order_data.get('order-price')\n  910              order.trigger_price = order_data.get('trigger-price')\n  911  \n\n/home/frederic/dev/trading/siis/trader/connector/binance/trader.py:\n  226          # quantity = market.format_quantity(market.adjust_quantity(order.quantity))\n  227          quantity = market.adjust_quantity(order.quantity)\n  228:         notional = quantity * (order.order_price or market.ofr)\n  229  \n  230          if notional < market.min_notional:\n  ...\n  245          # limit order need timeInForce\n  246          if order.order_type == Order.ORDER_LIMIT:\n  247:             data['price'] = market.format_price(order.order_price)\n  248              data['timeInForce'] = time_in_force\n  249          elif order.order_type == Order.ORDER_STOP:\n  250:             data['stopPrice'] = market.format_price(order.order_price)\n  251          elif order.order_type == Order.ORDER_STOP_LIMIT:\n  252:             data['price'] = market.format_price(order.order_price)\n  253              data['stopPrice'] = market.format_price(order.trigger_price)\n  254              data['timeInForce'] = time_in_force\n  255          elif order.order_type == Order.ORDER_TAKE_PROFIT:\n  256:             data['stopPrice'] = market.format_price(order.order_price)\n  257          elif order.order_type == Order.ORDER_TAKE_PROFIT_LIMIT:\n  258:             data['price'] = market.format_price(order.order_price)\n  259              data['stopPrice'] = market.format_price(order.trigger_price)\n  260              data['timeInForce'] = time_in_force\n  ...\n  874                  if data['type'] == 'LIMIT':\n  875                      order.order_type = Order.ORDER_LIMIT\n  876:                     order.order_price = data['price']\n  877                  elif data['type'] == 'LIMIT_MAKER':\n  878                      order.order_type = Order.ORDER_LIMIT # _MAKER\n  879:                     order.order_price = data['price']\n  880                  elif data['type'] == 'MARKET':\n  881                      order.order_type = Order.ORDER_MARKET\n  882                  elif data['type'] == 'STOP_LOSS':\n  883                      order.order_type = Order.ORDER_STOP\n  884:                     order.order_price = data['stopPrice']\n  885                  elif data['type'] == 'STOP_LOSS_LIMIT':\n  886                      order.order_type = Order.ORDER_STOP_LIMIT\n  887:                     order.order_price = data['price']\n  888                      order.trigger_price = data['stopPrice']\n  889                  elif data['type'] == 'TAKE_PROFIT':\n  890                      order.order_type = Order.ORDER_TAKE_PROFIT\n  891:                     order.order_price = data['stopPrice']\n  892                  elif data['type'] == 'TAKE_PROFIT_LIMIT':\n  893                      order.order_type = Order.ORDER_TAKE_PROFIT_LIMIT\n  894:                     order.order_price = data['price']\n  895                      order.trigger_price = data['stopPrice']\n  896  \n  ...\n 1105  \n 1106              order.quantity = data['quantity']\n 1107:             order.order_price = data['order-price']\n 1108              order.stop_loss = data['stop-loss']\n 1109  \n\n/home/frederic/dev/trading/siis/trader/connector/bitmex/trader.py:\n  234              postdict['ordType'] = 'Limit'\n  235              postdict['orderQty'] = qty\n  236:             postdict['price'] = order.order_price\n  237  \n  238              # only possible with limit order\n  ...\n  243              postdict['ordType'] = 'Stop'\n  244              postdict['orderQty'] = qty\n  245:             postdict['stopPx'] = order.order_price\n  246  \n  247          elif order.order_type == Order.ORDER_STOP_LIMIT:\n  ...\n  249              postdict['orderQty'] = qty\n  250              postdict['stopPx'] = order.trigger_price\n  251:             postdict['price'] = order.order_price\n  252  \n  253          elif order.order_type == Order.ORDER_TAKE_PROFIT:\n  254              postdict['ordType'] = 'MarketIfTouched'\n  255              postdict['orderQty'] = qty\n  256:             postdict['stopPx'] = order.order_price\n  257  \n  258          elif order.order_type == Order.ORDER_TAKE_PROFIT_LIMIT:\n  ...\n  260              postdict['orderQty'] = qty\n  261              postdict['stopPx'] = order.trigger_price\n  262:             postdict['price'] = order.order_price\n  263  \n  264          else:\n  ...\n  277              postdict['execInst'] = ','.join(exec_inst)\n  278  \n  279:         logger.info(\"Trader %s order %s %s @%s %s\" % (self.name, order.direction_to_str(), order.symbol, order.order_price, order.quantity))\n  280  \n  281          try:\n  ...\n  387          else:\n  388              order.order_type = Order.ORDER_LIMIT\n  389:             order.order_price = limit_price\n  390  \n  391              postdict['ordType'] = \"Limit\"\n  392:             postdict['price'] = order.order_price\n  393              postdict['orderQty'] = qty\n  394  \n  ...\n  599              elif src_order['ordType'] == \"Limit\":\n  600                  order.order_type = Order.ORDER_LIMIT\n  601:                 order.order_price = src_order.get('price')\n  602              elif src_order['ordType'] == \"Stop\":\n  603                  order.order_type = Order.ORDER_STOP\n  604:                 order.order_price = src_order.get('stopPx')\n  605              else:\n  606                  # stop limit, trigger marke, tripgger limit\n\n/home/frederic/dev/trading/siis/trader/connector/onebroker/trader.py:\n  267          }\n  268  \n  269:         if order.order_price:\n  270:             var['order_type_parameter'] = order.order_price  # can be null for market\n  271  \n  272          if order.stop_loss:\n\n/home/frederic/dev/trading/siis/trader/connector/papertrader/trader.py:\n  557  \n  558                  if order.order_type == Order.ORDER_LIMIT:\n  559:                     if (order.direction == Position.LONG and open_exec_price <= order.order_price) or \n  560:                        (order.direction == Position.SHORT and open_exec_price >= order.order_price):\n  561  \n  562                          if market.trade == market.TRADE_BUY_SELL:\n  ...\n  572                  elif order.order_type == Order.ORDER_STOP:\n  573                      # opposite trigger + market\n  574:                     if (order.direction == Position.LONG and close_exec_price <= order.order_price) or \n  575:                        (order.direction == Position.SHORT and close_exec_price >= order.order_price):\n  576  \n  577                          if market.trade == market.TRADE_BUY_SELL:\n  ...\n  639  \n  640          if order.order_type in (Order.ORDER_LIMIT, Order.ORDER_STOP_LIMIT, Order.ORDER_TAKE_PROFIT_LIMIT):\n  641:             bid_price = order.order_price\n  642:             ofr_price = order.order_price\n  643  \n  644          elif order.order_type in (Order.ORDER_MARKET, Order.ORDER_STOP, Order.ORDER_TAKE_PROFIT):\n  ...\n  728              if market and limit_price:\n  729                  order.order_type = Order.ORDER_LIMIT\n  730:                 order.order_price = limit_price\n  731              else:\n  732                  order.order_type = Order.ORDER_MARKET\n  ...\n  751              if order.order_type == Order.ORDER_LIMIT:\n  752                  # @todo limit execution when limit reach bid or ofr price (depend of the direction)\n  753:                 bid_price = order.order_price\n  754:                 ofr_price = order.order_price\n  755  \n  756              elif order.order_type == Order.ORDER_MARKET:\n  ...\n 1011                  'timestamp': order.transact_time,\n 1012                  'quantity': order.quantity,\n 1013:                 'order-price': order.order_price,\n 1014                  'stop-loss': order.stop_loss,\n 1015                  'take-profit': order.take_profit,\n ....\n 1028                  'timestamp': order.transact_time,\n 1029                  'quantity': order.quantity,\n 1030:                 'order-price': order.order_price,\n 1031                  'exec-price': open_exec_price,\n 1032                  'filled': base_qty,\n ....\n 1115                  'timestamp': order.transact_time,\n 1116                  'quantity': order.quantity,\n 1117:                 'order-price': order.order_price,\n 1118                  'stop-loss': order.stop_loss,\n 1119                  'take-profit': order.take_profit,\n ....\n 1132                  'timestamp': order.transact_time,\n 1133                  'quantity': order.quantity,\n 1134:                 'order-price': order.order_price,\n 1135                  'exec-price': close_exec_price,\n 1136                  'filled': base_qty,\n ....\n 1316              margin_factor = market.margin_factor\n 1317  \n 1318:             # logger.debug(order.symbol, bid_price, ofr_price, open_exec_price, close_exec_price, delta_price, current_position.entry_price, order.order_price)\n 1319              realized_position_cost = 0.0  # realized cost of the position in base currency\n 1320  \n ....\n 1474                  'timestamp': order.transact_time,\n 1475                  'quantity': order.quantity,\n 1476:                 'order-price': order.order_price,\n 1477                  'stop-loss': order.stop_loss,\n 1478                  'take-profit': order.take_profit,\n ....\n 1491                  'timestamp': order.transact_time,\n 1492                  'quantity': order.quantity,\n 1493:                 'order-price': order.order_price,\n 1494                  'exec-price': exec_price,\n 1495                  'avg-price': current_position.entry_price,\n ....\n 1636                  'timestamp': order.transact_time,\n 1637                  'quantity': order.quantity,\n 1638:                 'order-price': order.order_price,\n 1639                  'stop-loss': order.stop_loss,\n 1640                  'take-profit': order.take_profit,\n ....\n 1653                  'timestamp': order.transact_time,\n 1654                  'quantity': order.quantity,\n 1655:                 'order-price': order.order_price,\n 1656                  'exec-price': position.entry_price,\n 1657                  'avg-price': position.entry_price,\n ....\n 1742              margin_factor = market.margin_factor\n 1743  \n 1744:             # logger.debug(order.symbol, bid_price, ofr_price, open_exec_price, close_exec_price, delta_price, current_position.entry_price, order.order_price)\n 1745              realized_position_cost = 0.0  # realized cost of the position in base currency\n 1746  \n ....\n 1900                  'timestamp': order.transact_time,\n 1901                  'quantity': order.quantity,\n 1902:                 'order-price': order.order_price,\n 1903                  'stop-loss': order.stop_loss,\n 1904                  'take-profit': order.take_profit,\n ....\n 1917                  'timestamp': order.transact_time,\n 1918                  'quantity': order.quantity,\n 1919:                 'order-price': order.order_price,\n 1920                  'exec-price': exec_price,\n 1921                  'avg-price': current_position.entry_price,\n ....\n 2062                  'timestamp': order.transact_time,\n 2063                  'quantity': order.quantity,\n 2064:                 'order-price': order.order_price,\n 2065                  'stop-loss': order.stop_loss,\n 2066                  'take-profit': order.take_profit,\n ....\n 2079                  'timestamp': order.transact_time,\n 2080                  'quantity': order.quantity,\n 2081:                 'order-price': order.order_price,\n 2082                  'exec-price': position.entry_price,\n 2083                  'avg-price': position.entry_price,\n\n64 matches across 10 files\n\n\nSearching 260 files for \"'order-price'\" (case sensitive)\n\n/home/frederic/dev/trading/siis/trader/trader.py:\n  888  \n  889              # depending of the type\n  890:             order.order_price = order_data.get('order-price')\n  891              order.trigger_price = order_data.get('trigger-price')\n  892              order.time_in_force = order_data.get('time-in-force')\n  ...\n  907              order.quantity = order_data['quantity']\n  908  \n  909:             order.order_price = order_data.get('order-price')\n  910              order.trigger_price = order_data.get('trigger-price')\n  911  \n\n/home/frederic/dev/trading/siis/trader/connector/binance/trader.py:\n 1105  \n 1106              order.quantity = data['quantity']\n 1107:             order.order_price = data['order-price']\n 1108              order.stop_loss = data['stop-loss']\n 1109  \n\n/home/frederic/dev/trading/siis/trader/connector/papertrader/trader.py:\n 1011                  'timestamp': order.transact_time,\n 1012                  'quantity': order.quantity,\n 1013:                 'order-price': order.order_price,\n 1014                  'trigger-price': order.trigger_price,\n 1015                  'stop-loss': order.stop_loss,\n ....\n 1029                  'timestamp': order.transact_time,\n 1030                  'quantity': order.quantity,\n 1031:                 'order-price': order.order_price,\n 1032                  'trigger-price': order.trigger_price,\n 1033                  'exec-price': open_exec_price,\n ....\n 1117                  'timestamp': order.transact_time,\n 1118                  'quantity': order.quantity,\n 1119:                 'order-price': order.order_price,\n 1120                  'trigger-price': order.trigger_price,\n 1121                  'stop-loss': order.stop_loss,\n ....\n 1135                  'timestamp': order.transact_time,\n 1136                  'quantity': order.quantity,\n 1137:                 'order-price': order.order_price,\n 1138                  'trigger-price': order.trigger_price,\n 1139                  'exec-price': close_exec_price,\n ....\n 1478                  'timestamp': order.transact_time,\n 1479                  'quantity': order.quantity,\n 1480:                 'order-price': order.order_price,\n 1481                  'trigger-price': order.trigger_price,\n 1482                  'stop-loss': order.stop_loss,\n ....\n 1496                  'timestamp': order.transact_time,\n 1497                  'quantity': order.quantity,\n 1498:                 'order-price': order.order_price,\n 1499                  'trigger-price': order.trigger_price,\n 1500                  'exec-price': exec_price,\n ....\n 1642                  'timestamp': order.transact_time,\n 1643                  'quantity': order.quantity,\n 1644:                 'order-price': order.order_price,\n 1645                  'trigger-price': order.trigger_price,\n 1646                  'stop-loss': order.stop_loss,\n ....\n 1660                  'timestamp': order.transact_time,\n 1661                  'quantity': order.quantity,\n 1662:                 'order-price': order.order_price,\n 1663                  'trigger-price': order.trigger_price,\n 1664                  'exec-price': position.entry_price,\n ....\n 1908                  'timestamp': order.transact_time,\n 1909                  'quantity': order.quantity,\n 1910:                 'order-price': order.order_price,\n 1911                  'trigger-price': order.trigger_price,\n 1912                  'stop-loss': order.stop_loss,\n ....\n 1926                  'timestamp': order.transact_time,\n 1927                  'quantity': order.quantity,\n 1928:                 'order-price': order.order_price,\n 1929                  'trigger-price': order.trigger_price,\n 1930                  'exec-price': exec_price,\n ....\n 2072                  'timestamp': order.transact_time,\n 2073                  'quantity': order.quantity,\n 2074:                 'order-price': order.order_price,\n 2075                  'trigger-price': order.trigger_price,\n 2076                  'stop-loss': order.stop_loss,\n ....\n 2090                  'timestamp': order.transact_time,\n 2091                  'quantity': order.quantity,\n 2092:                 'order-price': order.order_price,\n 2093                  'trigger-price': order.trigger_price,\n 2094                  'exec-price': position.entry_price,\n\n/home/frederic/dev/trading/siis/watcher/connector/binance/watcher.py:\n  635                      'timestamp': timestamp,\n  636                      'quantity': float(data['q']),\n  637:                     'order-price': order_price,\n  638                      'trigger-price': trigger_price,\n  639                      'exec-price': float(data['L']),\n  ...\n  708                      'timestamp': event_timestamp,\n  709                      'quantity': float(data['q']),\n  710:                     'order-price': order_price,\n  711                      'trigger-price': trigger_price,\n  712                      'time-in-force': time_in_force,\n\n/home/frederic/dev/trading/siis/watcher/connector/bitmex/watcher.py:\n  303                                  'timestamp': operation_time,\n  304                                  'quantity': ld.get('orderQty', None),\n  305:                                 'order-price': order_price,\n  306                                  'trigger-price': trigger_price,\n  307                                  'stop-loss': None,\n  ...\n  374                              'timestamp': transact_time,\n  375                              'quantity': ld.get('orderQty', 0),\n  376:                             'order-price': order_price,\n  377                              'trigger-price': trigger_price,\n  378                              'time-in-force': time_in_force,\n\n19 matches across 5 files\n\n\nSearching 260 files for \".order_price\" (case sensitive)\n\n/home/frederic/dev/trading/siis/strategy/strategy.py:\n 1205                          'ts': trade.entry_open_time,\n 1206                          'd': trade.direction_to_str(),\n 1207:                         'l': market.format_price(trade.order_price),\n 1208                          'p': market.format_price(trade.entry_price),\n 1209                          'q': market.format_quantity(trade.order_quantity),\n\n/home/frederic/dev/trading/siis/strategy/strategyassettrade.py:\n   50          order = Order(trader, market_id)\n   51          order.direction = direction\n   52:         order.order_price = order_price\n   53          order.order_type = order_type\n   54          order.quantity = quantity\n   ..\n   66          self.dir = order.direction\n   67  \n   68:         self.op = order.order_price  # retains the order price\n   69          self.oq = order.quantity     # ordered quantity\n   70  \n   ..\n  155              order.direction = -self.dir  # neg dir\n  156              order.order_type = Order.ORDER_LIMIT\n  157:             order.order_price = price\n  158              order.quantity = self.e - self.x  # remaining\n  159  \n  ...\n  203              order.direction = -self.dir  # neg dir\n  204              order.order_type = Order.ORDER_STOP\n  205:             order.order_price = price\n  206              order.quantity = self.e - self.x  # remaining\n  207  \n\n/home/frederic/dev/trading/siis/strategy/strategyindmargintrade.py:\n   53          order = Order(trader, market_id)\n   54          order.direction = direction\n   55:         order.order_price = order_price\n   56          order.order_type = order_type\n   57          order.quantity = quantity\n   ..\n   64          self.dir = order.direction\n   65  \n   66:         self.op = order.order_price  # retains the order price\n   67          self.oq = order.quantity     # ordered quantity\n   68  \n   ..\n  165              order.reduce_only = True  # (not for now because it implies to have the filled qty, and so need to update each time trade qty is updated)\n  166              order.quantity = self.e - self.x  # remaining\n  167:             order.order_price = price\n  168  \n  169              trader.set_ref_order_id(order)\n  ...\n  201              order.reduce_only = True\n  202              order.quantity = self.e - self.x  # remaining\n  203:             order.order_price = price\n  204  \n  205              trader.set_ref_order_id(order)\n\n/home/frederic/dev/trading/siis/strategy/strategymargintrade.py:\n   50          order = Order(trader, market_id)\n   51          order.direction = direction\n   52:         order.order_price = order_price\n   53          order.order_type = order_type\n   54          order.quantity = quantity\n   ..\n   64          self.dir = order.direction\n   65  \n   66:         self.op = order.order_price  # retains the order price\n   67          self.oq = order.quantity     # ordered quantity\n   68  \n   ..\n  181              order.reduce_only = True\n  182              order.quantity = self.e - self.x  # remaining\n  183:             order.order_price = price\n  184  \n  185              trader.set_ref_order_id(order)\n  ...\n  232              order.reduce_only = True\n  233              order.quantity = self.e - self.x  # remaining\n  234:             order.order_price = price\n  235  \n  236              trader.set_ref_order_id(order)\n\n/home/frederic/dev/trading/siis/strategy/boostedblueskyday/bbstrategy.py:\n  360                  order = Order(trader, instrument.market_id)\n  361                  order.direction = direction\n  362:                 order.order_price = last_prices[-1]\n  363  \n  364                  # depends of the instrument and the account, and not always necessary, but always in paper trader\n\n/home/frederic/dev/trading/siis/trader/trader.py:\n  888  \n  889              # depending of the type\n  890:             order.order_price = order_data.get('order-price')\n  891              order.trigger_price = order_data.get('trigger-price')\n  892              order.time_in_force = order_data.get('time-in-force')\n  ...\n  907              order.quantity = order_data['quantity']\n  908  \n  909:             order.order_price = order_data.get('order-price')\n  910              order.trigger_price = order_data.get('trigger-price')\n  911  \n\n/home/frederic/dev/trading/siis/trader/connector/binance/trader.py:\n  226          # quantity = market.format_quantity(market.adjust_quantity(order.quantity))\n  227          quantity = market.adjust_quantity(order.quantity)\n  228:         notional = quantity * (order.order_price or market.ofr)\n  229  \n  230          if notional < market.min_notional:\n  ...\n  245          # limit order need timeInForce\n  246          if order.order_type == Order.ORDER_LIMIT:\n  247:             data['price'] = market.format_price(order.order_price)\n  248              data['timeInForce'] = time_in_force\n  249          elif order.order_type == Order.ORDER_STOP:\n  250:             data['stopPrice'] = market.format_price(order.order_price)\n  251          elif order.order_type == Order.ORDER_STOP_LIMIT:\n  252:             data['price'] = market.format_price(order.order_price)\n  253              data['stopPrice'] = market.format_price(order.trigger_price)\n  254              data['timeInForce'] = time_in_force\n  255          elif order.order_type == Order.ORDER_TAKE_PROFIT:\n  256:             data['stopPrice'] = market.format_price(order.order_price)\n  257          elif order.order_type == Order.ORDER_TAKE_PROFIT_LIMIT:\n  258:             data['price'] = market.format_price(order.order_price)\n  259              data['stopPrice'] = market.format_price(order.trigger_price)\n  260              data['timeInForce'] = time_in_force\n  ...\n  874                  if data['type'] == 'LIMIT':\n  875                      order.order_type = Order.ORDER_LIMIT\n  876:                     order.order_price = data['price']\n  877                  elif data['type'] == 'LIMIT_MAKER':\n  878                      order.order_type = Order.ORDER_LIMIT # _MAKER\n  879:                     order.order_price = data['price']\n  880                  elif data['type'] == 'MARKET':\n  881                      order.order_type = Order.ORDER_MARKET\n  882                  elif data['type'] == 'STOP_LOSS':\n  883                      order.order_type = Order.ORDER_STOP\n  884:                     order.order_price = data['stopPrice']\n  885                  elif data['type'] == 'STOP_LOSS_LIMIT':\n  886                      order.order_type = Order.ORDER_STOP_LIMIT\n  887:                     order.order_price = data['price']\n  888                      order.trigger_price = data['stopPrice']\n  889                  elif data['type'] == 'TAKE_PROFIT':\n  890                      order.order_type = Order.ORDER_TAKE_PROFIT\n  891:                     order.order_price = data['stopPrice']\n  892                  elif data['type'] == 'TAKE_PROFIT_LIMIT':\n  893                      order.order_type = Order.ORDER_TAKE_PROFIT_LIMIT\n  894:                     order.order_price = data['price']\n  895                      order.trigger_price = data['stopPrice']\n  896  \n  ...\n 1106              order.quantity = data['quantity']\n 1107  \n 1108:             order.order_price = data.get('order-price')\n 1109              order.trigger_price = data.get('trigger-price')\n 1110  \n\n/home/frederic/dev/trading/siis/trader/connector/bitmex/trader.py:\n  234              postdict['ordType'] = 'Limit'\n  235              postdict['orderQty'] = qty\n  236:             postdict['price'] = order.order_price\n  237  \n  238              # only possible with limit order\n  ...\n  243              postdict['ordType'] = 'Stop'\n  244              postdict['orderQty'] = qty\n  245:             postdict['stopPx'] = order.order_price\n  246  \n  247          elif order.order_type == Order.ORDER_STOP_LIMIT:\n  ...\n  249              postdict['orderQty'] = qty\n  250              postdict['stopPx'] = order.trigger_price\n  251:             postdict['price'] = order.order_price\n  252  \n  253          elif order.order_type == Order.ORDER_TAKE_PROFIT:\n  254              postdict['ordType'] = 'MarketIfTouched'\n  255              postdict['orderQty'] = qty\n  256:             postdict['stopPx'] = order.order_price\n  257  \n  258          elif order.order_type == Order.ORDER_TAKE_PROFIT_LIMIT:\n  ...\n  260              postdict['orderQty'] = qty\n  261              postdict['stopPx'] = order.trigger_price\n  262:             postdict['price'] = order.order_price\n  263  \n  264          else:\n  ...\n  277              postdict['execInst'] = ','.join(exec_inst)\n  278  \n  279:         logger.info(\"Trader %s order %s %s @%s %s\" % (self.name, order.direction_to_str(), order.symbol, order.order_price, order.quantity))\n  280  \n  281          try:\n  ...\n  387          else:\n  388              order.order_type = Order.ORDER_LIMIT\n  389:             order.order_price = limit_price\n  390  \n  391              postdict['ordType'] = \"Limit\"\n  392:             postdict['price'] = order.order_price\n  393              postdict['orderQty'] = qty\n  394  \n  ...\n  599              elif src_order['ordType'] == \"Limit\":\n  600                  order.order_type = Order.ORDER_LIMIT\n  601:                 order.order_price = src_order.get('price')\n  602              elif src_order['ordType'] == \"Stop\":\n  603                  order.order_type = Order.ORDER_STOP\n  604:                 order.order_price = src_order.get('stopPx')\n  605              else:\n  606                  # stop limit, trigger marke, tripgger limit\n\n/home/frederic/dev/trading/siis/trader/connector/onebroker/trader.py:\n  267          }\n  268  \n  269:         if order.order_price:\n  270:             var['order_type_parameter'] = order.order_price  # can be null for market\n  271  \n  272          if order.stop_loss:\n\n/home/frederic/dev/trading/siis/trader/connector/papertrader/trader.py:\n  557  \n  558                  if order.order_type == Order.ORDER_LIMIT:\n  559:                     if (order.direction == Position.LONG and open_exec_price <= order.order_price) or \n  560:                        (order.direction == Position.SHORT and open_exec_price >= order.order_price):\n  561  \n  562                          if market.trade == market.TRADE_BUY_SELL:\n  ...\n  572                  elif order.order_type == Order.ORDER_STOP:\n  573                      # opposite trigger + market\n  574:                     if (order.direction == Position.LONG and close_exec_price <= order.order_price) or \n  575:                        (order.direction == Position.SHORT and close_exec_price >= order.order_price):\n  576  \n  577                          if market.trade == market.TRADE_BUY_SELL:\n  ...\n  639  \n  640          if order.order_type in (Order.ORDER_LIMIT, Order.ORDER_STOP_LIMIT, Order.ORDER_TAKE_PROFIT_LIMIT):\n  641:             bid_price = order.order_price\n  642:             ofr_price = order.order_price\n  643  \n  644          elif order.order_type in (Order.ORDER_MARKET, Order.ORDER_STOP, Order.ORDER_TAKE_PROFIT):\n  ...\n  728              if market and limit_price:\n  729                  order.order_type = Order.ORDER_LIMIT\n  730:                 order.order_price = limit_price\n  731              else:\n  732                  order.order_type = Order.ORDER_MARKET\n  ...\n  751              if order.order_type == Order.ORDER_LIMIT:\n  752                  # @todo limit execution when limit reach bid or ofr price (depend of the direction)\n  753:                 bid_price = order.order_price\n  754:                 ofr_price = order.order_price\n  755  \n  756              elif order.order_type == Order.ORDER_MARKET:\n  ...\n 1011                  'timestamp': order.transact_time,\n 1012                  'quantity': order.quantity,\n 1013:                 'order-price': order.order_price,\n 1014                  'trigger-price': order.trigger_price,\n 1015                  'stop-loss': order.stop_loss,\n ....\n 1029                  'timestamp': order.transact_time,\n 1030                  'quantity': order.quantity,\n 1031:                 'order-price': order.order_price,\n 1032                  'trigger-price': order.trigger_price,\n 1033                  'exec-price': open_exec_price,\n ....\n 1117                  'timestamp': order.transact_time,\n 1118                  'quantity': order.quantity,\n 1119:                 'order-price': order.order_price,\n 1120                  'trigger-price': order.trigger_price,\n 1121                  'stop-loss': order.stop_loss,\n ....\n 1135                  'timestamp': order.transact_time,\n 1136                  'quantity': order.quantity,\n 1137:                 'order-price': order.order_price,\n 1138                  'trigger-price': order.trigger_price,\n 1139                  'exec-price': close_exec_price,\n ....\n 1320              margin_factor = market.margin_factor\n 1321  \n 1322:             # logger.debug(order.symbol, bid_price, ofr_price, open_exec_price, close_exec_price, delta_price, current_position.entry_price, order.order_price)\n 1323              realized_position_cost = 0.0  # realized cost of the position in base currency\n 1324  \n ....\n 1478                  'timestamp': order.transact_time,\n 1479                  'quantity': order.quantity,\n 1480:                 'order-price': order.order_price,\n 1481                  'trigger-price': order.trigger_price,\n 1482                  'stop-loss': order.stop_loss,\n ....\n 1496                  'timestamp': order.transact_time,\n 1497                  'quantity': order.quantity,\n 1498:                 'order-price': order.order_price,\n 1499                  'trigger-price': order.trigger_price,\n 1500                  'exec-price': exec_price,\n ....\n 1642                  'timestamp': order.transact_time,\n 1643                  'quantity': order.quantity,\n 1644:                 'order-price': order.order_price,\n 1645                  'trigger-price': order.trigger_price,\n 1646                  'stop-loss': order.stop_loss,\n ....\n 1660                  'timestamp': order.transact_time,\n 1661                  'quantity': order.quantity,\n 1662:                 'order-price': order.order_price,\n 1663                  'trigger-price': order.trigger_price,\n 1664                  'exec-price': position.entry_price,\n ....\n 1750              margin_factor = market.margin_factor\n 1751  \n 1752:             # logger.debug(order.symbol, bid_price, ofr_price, open_exec_price, close_exec_price, delta_price, current_position.entry_price, order.order_price)\n 1753              realized_position_cost = 0.0  # realized cost of the position in base currency\n 1754  \n ....\n 1908                  'timestamp': order.transact_time,\n 1909                  'quantity': order.quantity,\n 1910:                 'order-price': order.order_price,\n 1911                  'trigger-price': order.trigger_price,\n 1912                  'stop-loss': order.stop_loss,\n ....\n 1926                  'timestamp': order.transact_time,\n 1927                  'quantity': order.quantity,\n 1928:                 'order-price': order.order_price,\n 1929                  'trigger-price': order.trigger_price,\n 1930                  'exec-price': exec_price,\n ....\n 2072                  'timestamp': order.transact_time,\n 2073                  'quantity': order.quantity,\n 2074:                 'order-price': order.order_price,\n 2075                  'trigger-price': order.trigger_price,\n 2076                  'stop-loss': order.stop_loss,\n ....\n 2090                  'timestamp': order.transact_time,\n 2091                  'quantity': order.quantity,\n 2092:                 'order-price': order.order_price,\n 2093                  'trigger-price': order.trigger_price,\n 2094                  'exec-price': position.entry_price,\n\n64 matches across 10 files\n",
			"settings":
			{
				"buffer_size": 52982,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "watcher/connector/bitmex/watcher.py",
			"settings":
			{
				"buffer_size": 28714,
				"line_ending": "Unix"
			}
		},
		{
			"file": "trader/order.py",
			"settings":
			{
				"buffer_size": 7073,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/frederic/.siis/config/appliance.py",
			"settings":
			{
				"buffer_size": 30015,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "strategy/bitcoinalpha/bcaparameters.py",
			"settings":
			{
				"buffer_size": 4902,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "strategy/cryptoalpha/castrategytrader.py",
			"settings":
			{
				"buffer_size": 23581,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				"Syntax Check"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 32.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"gi",
				"Git: Commit"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"git add",
				"Git: Add..."
			],
			[
				"git puh",
				"Git: Push"
			],
			[
				"git pus",
				"Git: Push"
			],
			[
				"erro",
				"Anaconda: Show error list"
			],
			[
				"git ad",
				"Git: Add..."
			],
			[
				"diff",
				"Git: Diff Current File"
			],
			[
				"git tag",
				"Git: New Tag"
			],
			[
				"git psu",
				"Git: Push"
			],
			[
				"err",
				"Anaconda: Show error list"
			],
			[
				"requi",
				"Set Syntax: requirements.txt"
			],
			[
				"python",
				"Build With: Python"
			],
			[
				"run",
				"Anaconda: Run Current Test"
			],
			[
				"git",
				"Git: Diff Current File"
			],
			[
				"git ",
				"Git: Commit"
			],
			[
				"synta re",
				"Set Syntax: reStructuredText Improved"
			],
			[
				"restr",
				"Set Syntax: reStructuredText Improved"
			],
			[
				"rest",
				"Set Syntax: reStructuredText Improved"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"git g",
				"GitGutter: Compare Against HEAD"
			],
			[
				"git gu",
				"GitGutter: Compare Against Branch"
			],
			[
				"enab",
				"Package Control: Enable Package"
			],
			[
				"emmet",
				"Emmet: Split\\Join Tag"
			],
			[
				"emme",
				"Emmet: Go to Matching Pair"
			],
			[
				"syn ht",
				"Set Syntax: HTML"
			],
			[
				"emmet ",
				"Set Syntax: Emmet"
			],
			[
				"packag ds",
				"Package Control: Disable Package"
			],
			[
				"pack en",
				"Package Control: Enable Package"
			],
			[
				"req",
				"requirements.txt: Clear Cache"
			],
			[
				"pack ins",
				"Package Control: Install Package"
			],
			[
				"pack up",
				"Package Control: Upgrade Package"
			],
			[
				"pack",
				"Package Control: List Packages"
			],
			[
				"ana",
				"Anaconda: Show error list"
			],
			[
				"ana got",
				"Anaconda: Goto object definition"
			],
			[
				"an goto",
				"Anaconda: Goto object definition"
			],
			[
				"got",
				"Emmet: Go to Matching Pair"
			],
			[
				"find",
				"Anaconda: Find object usage"
			],
			[
				"packa en",
				"Package Control: Enable Package"
			],
			[
				"package dis",
				"Package Control: Disable Package"
			],
			[
				"pack e",
				"Package Control: Enable Package"
			],
			[
				"lower",
				"Convert Case: Lower Case"
			],
			[
				"pac",
				"Package Control: List Packages"
			],
			[
				"error",
				"Anaconda: Show error list"
			],
			[
				"git diff",
				"Git: Diff Tool Current File"
			],
			[
				"pack lis",
				"Package Control: List Packages"
			],
			[
				"git dif",
				"Git: Diff Current File"
			],
			[
				"git commi",
				"Git: Commit"
			],
			[
				"build",
				"Build With: Python"
			],
			[
				"git pu",
				"Git: Push"
			],
			[
				"git co",
				"Git: Commit"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"render",
				"Preferences: Key Bindings - User"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"er",
				"Anaconda: Show error list"
			],
			[
				"git c",
				"Git: Commit"
			],
			[
				"id",
				"Indentation: Reindent Lines"
			],
			[
				"iden",
				"Indentation: Reindent Lines"
			],
			[
				"git a",
				"Git: Add..."
			],
			[
				"git his",
				"Git: Diff Current File (Ignore Whitespace)"
			],
			[
				"tab",
				"Indentation: Convert to Tabs"
			],
			[
				"GIT AD",
				"Git: Add..."
			],
			[
				":empty",
				"Snippet: for... empty..."
			],
			[
				"gi add",
				"Git: Add..."
			],
			[
				"terl",
				"TernJS: Rename variable"
			],
			[
				"tern",
				"TernJS: Reload"
			],
			[
				"js",
				"TernJS: Next Occurance"
			],
			[
				"git commit",
				"Git: Commit"
			],
			[
				"space",
				"Indentation: Convert to Spaces"
			],
			[
				":w",
				":w - Save"
			],
			[
				"rename",
				"File: Rename"
			],
			[
				"count",
				"Code Folding: Fold Tag Attributes"
			],
			[
				"git push ",
				"Git: Push"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"remvoe",
				"Package Control: Remove Package"
			],
			[
				"table",
				"Table Editor: Disable 'align_number_right' for current view"
			],
			[
				"pa",
				"Package Control: List Packages"
			],
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"indent",
				"Indentation: Reindent Lines"
			],
			[
				"git commit ",
				"Git: Commit"
			],
			[
				"git add ",
				"Git: Add..."
			],
			[
				":set ",
				"Preferences: Settings - Default"
			],
			[
				"pep8",
				"Snippet: coding: utf-8"
			],
			[
				"spac",
				"Indentation: Convert to Spaces"
			],
			[
				"disab",
				"Package Control: Disable Package"
			],
			[
				"commit",
				"Git: Commit history"
			],
			[
				"djan",
				"Set Syntax: HTML (Django)"
			],
			[
				"gitg",
				"GitGutter: Compare Against Branch"
			],
			[
				"html",
				"Set Syntax: HTML (Django)"
			],
			[
				"inden",
				"Indentation: Reindent Lines"
			],
			[
				"rein",
				"Indentation: Reindent Lines"
			],
			[
				"con",
				"Indentation: Convert to Spaces"
			],
			[
				"ind",
				"Indentation: Reindent Lines"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"ident",
				"SublimeCodeIntel: Reset"
			],
			[
				"inde",
				"Indentation: Reindent Lines"
			],
			[
				"intel",
				"SublimeCodeIntel: Reset"
			],
			[
				"intell",
				"SublimeCodeIntel: Disable Plugin"
			],
			[
				"Package Control: i",
				"Package Control: Discover Packages"
			],
			[
				"Intel",
				"Package Control: Install Package"
			]
		],
		"width": 392.0
	},
	"console":
	{
		"height": 410.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/frederic/dev/trading/siis",
		"/home/frederic/dev/trading/siis/strategy",
		"/home/frederic/dev/trading/siis/strategy/bitcoinalpha"
	],
	"file_history":
	[
		"/home/frederic/dev/trading/siis/trader/connector/onebroker/trader.py",
		"/home/frederic/dev/trading/siis/trader/connector/bitmex/trader.py",
		"/home/frederic/dev/trading/siis/trader/connector/binance/trader.py",
		"/home/frederic/dev/trading/siis/trader/trader.py",
		"/home/frederic/dev/trading/siis/strategy/boostedblueskyday/bbstrategy.py",
		"/home/frederic/dev/trading/siis/strategy/strategyindmargintrade.py",
		"/home/frederic/dev/trading/siis/strategy/strategymargintrade.py",
		"/home/frederic/dev/trading/siis/strategy/strategyassettrade.py",
		"/home/frederic/dev/trading/siis/trader/order.py",
		"/home/frederic/dev/trading/siis/strategy/strategy.py",
		"/home/frederic/dev/trading/siis/watcher/connector/bitmex/watcher.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/indicator.py",
		"/home/frederic/dev/trading/siis/trader/connector/ig/trader.py",
		"/home/frederic/dev/trading/siis/watcher/connector/binance/watcher.py",
		"/home/frederic/dev/trading/siis/watcher/connector/ig/watcher.py",
		"/home/frederic/dev/trading/siis/strategy/strategytrader.py",
		"/home/frederic/dev/trading/siis/database/pgsql.py",
		"/home/frederic/dev/trading/siis/strategy/strategytrade.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/pivotpoint/pivotpoint.py",
		"/home/frederic/dev/trading/siis/strategy/forexalpha/fasuba.py",
		"/home/frederic/dev/trading/siis/strategy/crystalball/cbsuba.py",
		"/home/frederic/dev/trading/siis/strategy/cryptoalpha/casubc.py",
		"/home/frederic/dev/trading/siis/strategy/cryptoalpha/casubb.py",
		"/home/frederic/dev/trading/siis/strategy/bitcoinalpha/bcasubb.py",
		"/home/frederic/.siis/config/identity.py",
		"/home/frederic/dev/trading/siis/scripts/fetch-binance",
		"/home/frederic/dev/trading/siis/scripts/fetch-ig",
		"/home/frederic/dev/trading/siis/scripts/fetch-bitmex",
		"/home/frederic/dev/trading/siis/strategy/bitcoinalpha/bcaparameters.py",
		"/home/frederic/dev/trading/siis/strategy/tradeop/tradeop.py",
		"/home/frederic/dev/trading/siis/strategy/if ld['currentQty'] is None",
		"/home/frederic/dev/trading/siis/trader/connector/papertrader/trader.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/utils.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/price/price.py",
		"/home/frederic/dev/trading/siis/instrument/instrument.py",
		"/home/frederic/dev/trading/siis/app/regioncommands.py",
		"/home/frederic/dev/trading/siis/monitor/desktopnotifier.py",
		"/home/frederic/dev/trading/siis/notifier/signal.py",
		"/home/frederic/dev/trading/siis/strategy/cryptoalpha/castrategytrader.py",
		"/home/frederic/dev/trading/siis/common/siislog.py",
		"/home/frederic/dev/trading/siis/terminal/terminal.py",
		"/home/frederic/dev/trading/siis/strategy/cryptoalpha/castrategy.py",
		"/home/frederic/dev/trading/siis/strategy/bitcoinalpha/bcasuba.py",
		"/home/frederic/dev/trading/siis/connector/bitmex/connector.py",
		"/home/frederic/dev/trading/siis/database/mysql.py",
		"/home/frederic/dev/trading/siis/trader/position.py",
		"/home/frederic/dev/trading/siis/trader/connector/bitmex/account.py",
		"/home/frederic/dev/trading/siis/trader/account.py",
		"/home/frederic/dev/trading/siis/siis.py",
		"/home/frederic/dev/trading/siis/strategy/region/region.py",
		"/home/frederic/dev/trading/siis/database/database.py",
		"/home/frederic/dev/trading/siis/strategy/cryptoalpha/casuba.py",
		"/home/frederic/dev/trading/siis/app/tradingcommands.py",
		"/home/frederic/dev/trading/siis/strategy/forexalpha/fastrategy.py",
		"/home/frederic/dev/trading/siis/strategy/bitcoinalpha/bcastrategy.py",
		"/home/frederic/dev/trading/siis/scripts/prefetch-bitmex",
		"/home/frederic/dev/trading/siis/trader/asset.py",
		"/home/frederic/dev/trading/siis/watcher/position.py",
		"/home/frederic/dev/trading/siis/strategy/bitcoinalpha/bcasub.py",
		"/home/frederic/dev/trading/siis/strategy/cryptoalpha/casub.py",
		"/home/frederic/dev/trading/siis/strategy/timeframebasedsub.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/zigzag/zigzag.py",
		"/home/frederic/dev/trading/siis/app/help.py",
		"/home/frederic/dev/trading/siis/strategy/cryptoalpha/caparameters2.py",
		"/home/frederic/dev/trading/siis/trader/market.py",
		"/home/frederic/dev/trading/siis/strategy/service.py",
		"/home/frederic/dev/trading/siis/strategy/timeframebasedstrategytrader.py",
		"/home/frederic/dev/trading/siis/database/tickstorage.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/sinewave/sinewave.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/sinewave/__init__.py",
		"/home/frederic/dev/trading/siis/watcher/watcher.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/fibonacci/fibonacci.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/sma/sma.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/stochastic/stochastic.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/stochrsi/stochrsi.py",
		"/home/frederic/dev/trading/siis/config/config.py",
		"/home/frederic/dev/trading/siis/connector/ig/utils.py",
		"/home/frederic/dev/trading/siis/connector/ig/stream.py",
		"/home/frederic/dev/trading/siis/view/service.py",
		"/home/frederic/dev/trading/siis/connector/bitmex/ws.py",
		"/home/frederic/dev/trading/siis/watcher/connector/tiingo/watcher.py",
		"/home/frederic/dev/trading/siis/watcher/connector/tiingo/fetcher.py",
		"/home/frederic/dev/trading/siis/watcher/connector/alphavantage/fetcher.py",
		"/home/frederic/dev/trading/siis/watcher/connector/alphavantage/watcher.py",
		"/home/frederic/dev/trading/siis/connector/ig/rest.py",
		"/home/frederic/dev/trading/siis/connector/ig/lightstreamer.py",
		"/home/frederic/dev/trading/siis/watcher/connector/ig/fetcher.py",
		"/home/frederic/dev/trading/siis/connector/ig/connector.py",
		"/home/frederic/dev/trading/siis/siis.sublime-project",
		"/home/frederic/dev/trading/siis/common/runnable.py",
		"/home/frederic/dev/trading/siis/common/workerpool.py",
		"/home/frederic/dev/trading/siis/strategy/forexalpha/fastrategytrader.py",
		"/home/frederic/dev/trading/siis/watcher/service.py",
		"/home/frederic/dev/trading/siis/watcher/connector/binance/fetcher.py",
		"/home/frederic/dev/trading/siis/watcher/connector/bitmex/fetcher.py",
		"/home/frederic/dev/trading/siis/watcher/connector/tradingview/watcher.py",
		"/home/frederic/dev/trading/siis/monitor/service.py",
		"/home/frederic/dev/trading/siis/database/ohlcstorage.py",
		"/home/frederic/dev/trading/siis/app/generalcommands.py",
		"/home/frederic/dev/trading/siis/sql/initpg.sql",
		"/home/frederic/dev/trading/siis/sql/initmy.sql",
		"/home/frederic/dev/trading/siis/common/utils.py",
		"/home/frederic/dev/trading/siis/trader/service.py",
		"/home/frederic/dev/trading/siis/trader/connector/ig/account.py",
		"/home/frederic/dev/trading/siis/view/view.py",
		"/home/frederic/dev/trading/siis/view/accountview.py",
		"/home/frederic/dev/trading/siis/strategy/crystalball/cbstrategy.py",
		"/home/frederic/dev/trading/siis/TODO",
		"/home/frederic/dev/trading/siis/terminal/command.py",
		"/home/frederic/dev/trading/siis/trader/connector/binance/account.py",
		"/home/frederic/dev/trading/siis/trader/connector/onebroker/account.py",
		"/home/frederic/dev/trading/siis/common/keyed.py",
		"/home/frederic/dev/trading/siis/strategy/bitcoinalpha/bcastrategytrader.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/donchian/donchian.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/score.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/comparator.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/wma/wma.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/vwma/vwma.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/volume/volume.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/triangle/triangle.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/tomdemark/tomdemark.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/sar/sar.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/rsi/rsi.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/momentum/momentum.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/macd/macd.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/hma/hma.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/history/history.py",
		"/home/frederic/dev/trading/siis/strategy/indicator/ema/ema.py"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 143.0,
		"where_history":
		[
			"",
			"*.py",
			"",
			"*.js",
			"*.py",
			"",
			"*.js",
			"",
			"*.py",
			"",
			"*.py",
			"",
			"*.py",
			"*.html",
			"*.py",
			"*.html",
			"*.py",
			"*.*",
			"*.html",
			"*.js",
			"*.py",
			"*.html",
			"",
			"*.html",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"trigger-p",
			"order_price",
			"stop_pri",
			"order_price",
			".order_pric",
			"modify",
			"order_price",
			"price",
			".order_price",
			"order-price",
			"order_price",
			".order_price",
			"'order-price'",
			"'order-price':",
			"'order-price': o",
			".order_price",
			"'take-profit'",
			"ordType",
			"create_",
			"Order.",
			"Order.ORDE",
			"Order.",
			"on_order_up",
			"on_order_op",
			"on_trade_op",
			"'stop-loss'",
			"ORDER_LIMIT",
			"SL ",
			" ORDER_STOP",
			" = Order.ORDER_STOP",
			".trigger_price",
			"limit_pri",
			"trigger_",
			".order_price",
			"order_price",
			"__exec_ind_margin_order",
			"Order.ORDER_TAKE_PROFIT",
			"ORDER_TAKE_PROFIT",
			"ORDER_STOP_LIMIT",
			".ORDER_STOP",
			"ORDER_TAKE_PROFIT",
			"ORDER_TAKE_PROFIT_LIMIT",
			"order.order_price\n",
			"_pending",
			"self._pending",
			"collections",
			"collections\n",
			"import collections",
			"__exec_margin_order",
			"MARKET",
			"Exit avg-",
			"pivotpoint.compute(",
			".pivotpoint.compute(",
			".prev_",
			".prev_s",
			".prev_supports",
			"_prev_supports",
			"pivotpoint",
			"bitmex-alts",
			"bitmex-all",
			"SIZE_FACTOR",
			"bitmex-backtesting",
			"user_mgmt",
			"retained_exit =",
			"has_",
			"logger.",
			"logger.info(",
			"logger.info",
			"self.limit_oid =",
			"modify_take_profit",
			"trade.sl =",
			"post_only =",
			".last_",
			"take_profit",
			".has_stop_order",
			".has_limit_order",
			"def id",
			"modify_stop",
			".sl_created",
			"modify_ta",
			"modify_s",
			"modify",
			"def last_",
			"last_ta",
			"self.last_tp_ot",
			"order.c",
			"last_tp_ot",
			"sell_trad",
			"exit_trades",
			"self.xot",
			"_exit_state = StrategyTrade.STATE_OPENED",
			"self.xot",
			"exec_logg",
			"created_time",
			"order",
			"order/",
			"cancel_order",
			"OPEN",
			"  File \"/home/frederic/dev/trading/siis/connector/bitmex/ws.py\", line 445, in __on_message\n    self._callback[1](self._callback[0], 'action', (action, table, updated, message['data']))\nif ld['currentQty'] is None:\n\n",
			"def time",
			"def opera",
			".test_and_operate",
			".operate(",
			".sl =",
			"take_profit =",
			"SIGNAL_STRATEGY_ENTRY_EXIT",
			"SIGNAL_STRATEGY_MODIFY",
			"SIGNAL_STRATEGY_ENTRY_EXIT",
			"SIGNAL_STRATEGY_MODIFY",
			"].pivotpoint.last_resistances",
			"Terminal",
			"pivotpoint.last_resistances[",
			"pivotpoint.last_resistances[2\n",
			"pivotpoint.last_resistances[2",
			"pivotpoint.last_resistances",
			".loads(",
			"def notify_order",
			"notify_order",
			"notify_order(",
			"SIGNAL_STRATEGY_ENTRY_EXIT",
			"view=\"signal\"",
			"logger.",
			"view=\"trader\"",
			"view='trader'",
			"'content",
			"content",
			"exec_",
			" or self.timeframes[self.sltp_timeframe].pivotpoint.last_resistances[2]"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"logger.",
			"strategy_trader",
			"'atr': ('atr', 14, 1.5),",
			"'pivotpoint': ('pivotpoint', 0,),",
			"'atr': ('atr', 14, 3.0),",
			"'bbawe': ('bbawe', 20, 2.0, 3.0, 5, 34, False),",
			": 38,",
			"'price': ('price', 2,),",
			"ema': ('ema', 8,),",
			"#             'timeframe': ",
			"'timeframe': ",
			"'pivotpoint': ('pivotpoint', 5,),",
			"'ema': ('ema', 3,),",
			"'ema': ('ema', 8,),",
			"'pivotpoint': ('pivotpoint', 3,),",
			"'bollingerbands': ('bollingerbands', 36,),",
			"'bollingerbands': None, # ('bollingerbands', 36,),",
			"'bollingerbands': ('bollingerbands', 36,),",
			"'rsi': ('rsi', 14,),",
			"'ema': ('ema', 5,),",
			"'ema': ('ema', 8,),",
			"'bollingerbands': ('bollingerbands', 21,),",
			"'pivotpoint': ('pivotpoint', 5,),",
			"'ema': ('ema', 10,),",
			"'pivotpoint': ('pivotpoint', 3,),",
			"'pivotpoint': ('pivotpoint', 0,),",
			"_last_ohlcs",
			"_last_ohlc",
			")",
			"http://127.0.0.1:8000",
			"http://127.0.0.1",
			"\\),",
			"INSERT IGNORE ",
			" TRUE,",
			" FALSE,",
			"FALSE,",
			"ezpiclient",
			"TRUE,",
			"FALSE,",
			"",
			"doc",
			", ",
			"(",
			"    VALUES('",
			"VALUES('",
			"'UMR 1095 : GDEC/Génétique Diversité et Ecophysiologie des Céréales (INRA), Centre de recherche de Clermont-Ferrand-Theix, France'",
			"('$2', '$1', '$4', '$3', '$5'),",
			"('$2', '$1', '$4', '$3', '$5'},",
			"{'last_name': '$1', first_name: '$2', team: '$3', email: '$4'},",
			"\n            ",
			"ezpoai.",
			"span.",
			": Element.",
			"'},",
			"    '},",
			"    {'",
			"0",
			"    'id': $1, 'name': $3, 'parent_id': $2, 'color': $4,",
			"    'id': $1, 'name': $2, 'parent_id': 'NULL', 'color': $3,",
			"    'id': $0, 'name': $1, 'parent_id': 'NULL', 'color': $2,",
			"    'id': $1, 'name': $2, 'parent_id': 'NULL', 'color': $3,",
			"    'id': $(1), 'name': $(2), 'parent_id': 'NULL', 'color': $(3),",
			"    'id': %1, 'name': %2, 'parent_id': 'NULL', 'color': %3,",
			")",
			"dlg_offset_position",
			"tmp",
			", '000000'),",
			" , '000000'),",
			"'",
			"'%s'",
			"",
			"),",
			"(2000+$1, ?, \"$2\")",
			"(1000+$1, $2, \"$3\")",
			"($1, \"$2\")",
			"{{STATIC_URL}}",
			"^",
			"",
			"^",
			"10000+",
			"105+",
			"(90+$1, $2, \"$3\"),",
			"($1, $2, \"$3\"),",
			"(\"$2\"),",
			"($1, \"$2\"),",
			"($1, $2),",
			"($1, $2)",
			"",
			"cismotif_details_panel",
			"profile_logout",
			"profile_sign_up",
			"profile_sign_in",
			"is_authenticated()",
			"{% url 'promoteranalysis:' %}",
			"{{url}}",
			"{% url %}",
			"{{url}}",
			"success"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "strategy/bitcoinalpha/bcastrategytrader.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30072,
						"regions":
						{
						},
						"selection":
						[
							[
								20158,
								20158
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5610.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "trader/connector/papertrader/trader.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 86485,
						"regions":
						{
						},
						"selection":
						[
							[
								19265,
								19265
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7893.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 52982,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										294,
										306
									],
									[
										643,
										655
									],
									[
										842,
										854
									],
									[
										1097,
										1109
									],
									[
										1334,
										1346
									],
									[
										1608,
										1620
									],
									[
										1807,
										1819
									],
									[
										2170,
										2182
									],
									[
										2388,
										2400
									],
									[
										2644,
										2656
									],
									[
										2843,
										2855
									],
									[
										3093,
										3105
									],
									[
										3311,
										3323
									],
									[
										3611,
										3623
									],
									[
										3897,
										3909
									],
									[
										4185,
										4197
									],
									[
										4579,
										4591
									],
									[
										4834,
										4846
									],
									[
										5025,
										5037
									],
									[
										5163,
										5175
									],
									[
										5441,
										5453
									],
									[
										5586,
										5598
									],
									[
										5888,
										5900
									],
									[
										6081,
										6093
									],
									[
										6381,
										6393
									],
									[
										6578,
										6590
									],
									[
										6835,
										6847
									],
									[
										7041,
										7053
									],
									[
										7236,
										7248
									],
									[
										7541,
										7553
									],
									[
										7759,
										7771
									],
									[
										8000,
										8012
									],
									[
										8236,
										8248
									],
									[
										8484,
										8496
									],
									[
										8719,
										8731
									],
									[
										8885,
										8897
									],
									[
										9013,
										9025
									],
									[
										9231,
										9243
									],
									[
										9412,
										9424
									],
									[
										9662,
										9674
									],
									[
										9730,
										9742
									],
									[
										10050,
										10062
									],
									[
										10161,
										10173
									],
									[
										10477,
										10489
									],
									[
										10589,
										10601
									],
									[
										10849,
										10861
									],
									[
										10898,
										10910
									],
									[
										11164,
										11176
									],
									[
										11491,
										11503
									],
									[
										11544,
										11556
									],
									[
										11786,
										11798
									],
									[
										12067,
										12079
									],
									[
										12335,
										12347
									],
									[
										12616,
										12628
									],
									[
										12951,
										12963
									],
									[
										13228,
										13240
									],
									[
										13509,
										13521
									],
									[
										13795,
										13807
									],
									[
										14076,
										14088
									],
									[
										14430,
										14442
									],
									[
										14707,
										14719
									],
									[
										14988,
										15000
									],
									[
										15274,
										15286
									],
									[
										15555,
										15567
									],
									[
										16010,
										16022
									],
									[
										16359,
										16371
									],
									[
										16558,
										16570
									],
									[
										16813,
										16825
									],
									[
										17050,
										17062
									],
									[
										17324,
										17336
									],
									[
										17523,
										17535
									],
									[
										17886,
										17898
									],
									[
										18104,
										18116
									],
									[
										18360,
										18372
									],
									[
										18559,
										18571
									],
									[
										18809,
										18821
									],
									[
										19027,
										19039
									],
									[
										19327,
										19339
									],
									[
										19613,
										19625
									],
									[
										19901,
										19913
									],
									[
										20295,
										20307
									],
									[
										20550,
										20562
									],
									[
										20741,
										20753
									],
									[
										20879,
										20891
									],
									[
										21157,
										21169
									],
									[
										21302,
										21314
									],
									[
										21604,
										21616
									],
									[
										21797,
										21809
									],
									[
										22097,
										22109
									],
									[
										22294,
										22306
									],
									[
										22551,
										22563
									],
									[
										22757,
										22769
									],
									[
										22952,
										22964
									],
									[
										23257,
										23269
									],
									[
										23475,
										23487
									],
									[
										23716,
										23728
									],
									[
										23952,
										23964
									],
									[
										24200,
										24212
									],
									[
										24435,
										24447
									],
									[
										24601,
										24613
									],
									[
										24729,
										24741
									],
									[
										24947,
										24959
									],
									[
										25128,
										25140
									],
									[
										25378,
										25390
									],
									[
										25446,
										25458
									],
									[
										25766,
										25778
									],
									[
										25877,
										25889
									],
									[
										26193,
										26205
									],
									[
										26305,
										26317
									],
									[
										26565,
										26577
									],
									[
										26614,
										26626
									],
									[
										26880,
										26892
									],
									[
										27207,
										27219
									],
									[
										27260,
										27272
									],
									[
										27502,
										27514
									],
									[
										27783,
										27795
									],
									[
										28051,
										28063
									],
									[
										28332,
										28344
									],
									[
										28667,
										28679
									],
									[
										28944,
										28956
									],
									[
										29225,
										29237
									],
									[
										29511,
										29523
									],
									[
										29792,
										29804
									],
									[
										30146,
										30158
									],
									[
										30423,
										30435
									],
									[
										30704,
										30716
									],
									[
										30990,
										31002
									],
									[
										31271,
										31283
									],
									[
										31645,
										31658
									],
									[
										31933,
										31946
									],
									[
										32203,
										32216
									],
									[
										32485,
										32498
									],
									[
										32770,
										32783
									],
									[
										33056,
										33069
									],
									[
										33341,
										33354
									],
									[
										33628,
										33641
									],
									[
										33913,
										33926
									],
									[
										34194,
										34207
									],
									[
										34479,
										34492
									],
									[
										34770,
										34783
									],
									[
										35055,
										35068
									],
									[
										35336,
										35349
									],
									[
										35621,
										35634
									],
									[
										35981,
										35994
									],
									[
										36274,
										36287
									],
									[
										36674,
										36687
									],
									[
										37005,
										37018
									],
									[
										37490,
										37502
									],
									[
										37839,
										37851
									],
									[
										38038,
										38050
									],
									[
										38293,
										38305
									],
									[
										38530,
										38542
									],
									[
										38804,
										38816
									],
									[
										39003,
										39015
									],
									[
										39366,
										39378
									],
									[
										39584,
										39596
									],
									[
										39840,
										39852
									],
									[
										40039,
										40051
									],
									[
										40289,
										40301
									],
									[
										40507,
										40519
									],
									[
										40807,
										40819
									],
									[
										41093,
										41105
									],
									[
										41381,
										41393
									],
									[
										41775,
										41787
									],
									[
										42030,
										42042
									],
									[
										42221,
										42233
									],
									[
										42359,
										42371
									],
									[
										42637,
										42649
									],
									[
										42782,
										42794
									],
									[
										43084,
										43096
									],
									[
										43277,
										43289
									],
									[
										43577,
										43589
									],
									[
										43774,
										43786
									],
									[
										44031,
										44043
									],
									[
										44237,
										44249
									],
									[
										44432,
										44444
									],
									[
										44753,
										44765
									],
									[
										44971,
										44983
									],
									[
										45212,
										45224
									],
									[
										45448,
										45460
									],
									[
										45696,
										45708
									],
									[
										45931,
										45943
									],
									[
										46097,
										46109
									],
									[
										46225,
										46237
									],
									[
										46443,
										46455
									],
									[
										46624,
										46636
									],
									[
										46874,
										46886
									],
									[
										46942,
										46954
									],
									[
										47262,
										47274
									],
									[
										47373,
										47385
									],
									[
										47689,
										47701
									],
									[
										47801,
										47813
									],
									[
										48061,
										48073
									],
									[
										48110,
										48122
									],
									[
										48376,
										48388
									],
									[
										48703,
										48715
									],
									[
										48756,
										48768
									],
									[
										48998,
										49010
									],
									[
										49283,
										49295
									],
									[
										49569,
										49581
									],
									[
										49854,
										49866
									],
									[
										50207,
										50219
									],
									[
										50484,
										50496
									],
									[
										50769,
										50781
									],
									[
										51050,
										51062
									],
									[
										51335,
										51347
									],
									[
										51692,
										51704
									],
									[
										51969,
										51981
									],
									[
										52254,
										52266
									],
									[
										52535,
										52547
									],
									[
										52820,
										52832
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								47266,
								47266
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 4,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 5660.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "watcher/connector/bitmex/watcher.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28714,
						"regions":
						{
						},
						"selection":
						[
							[
								10401,
								10401
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3922.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "trader/order.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7073,
						"regions":
						{
						},
						"selection":
						[
							[
								1618,
								1618
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/frederic/.siis/config/appliance.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30015,
						"regions":
						{
						},
						"selection":
						[
							[
								20127,
								20127
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9661.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "strategy/bitcoinalpha/bcaparameters.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4902,
						"regions":
						{
						},
						"selection":
						[
							[
								3779,
								3779
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1042.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "strategy/cryptoalpha/castrategytrader.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23581,
						"regions":
						{
						},
						"selection":
						[
							[
								8834,
								8834
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3975.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 41.0
	},
	"input":
	{
		"height": 41.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.anaconda_documentation":
	{
		"height": 112.0
	},
	"output.exec":
	{
		"height": 287.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 112.0
	},
	"output.rope_python_documentation":
	{
		"height": 112.0
	},
	"pinned_build_system": "",
	"project": "siis.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"indma",
				"strategy/strategyindmargintrade.py"
			],
			[
				"margin",
				"strategy/strategymargintrade.py"
			],
			[
				"ord",
				"trader/order.py"
			],
			[
				"or",
				"trader/order.py"
			],
			[
				"trader",
				"trader/connector/binance/trader.py"
			],
			[
				"ind",
				"strategy/indicator/indicator.py"
			],
			[
				"indm",
				"strategy/strategyindmargintrade.py"
			],
			[
				"assett",
				"strategy/strategyassettrade.py"
			],
			[
				"marg",
				"strategy/strategymargintrade.py"
			],
			[
				"watc",
				"watcher/connector/binance/watcher.py"
			],
			[
				"watcher",
				"watcher/connector/bitmex/watcher.py"
			],
			[
				"watch",
				"watcher/connector/binance/watcher.py"
			],
			[
				"ytrader",
				"strategy/strategytrader.py"
			],
			[
				"order",
				"trader/order.py"
			],
			[
				"intra",
				"strategy/strategymargintrade.py"
			],
			[
				"orde",
				"trader/order.py"
			],
			[
				"papert",
				"trader/connector/papertrader/trader.py"
			],
			[
				"bcas",
				"strategy/bitcoinalpha/bcastrategytrader.py"
			],
			[
				"idn",
				"strategy/indicator/indicator.py"
			],
			[
				"piv",
				"strategy/indicator/pivotpoint/pivotpoint.py"
			],
			[
				"pivo",
				"strategy/indicator/pivotpoint/pivotpoint.py"
			],
			[
				"bc",
				"strategy/bitcoinalpha/bcastrategytrader.py"
			],
			[
				"para",
				"strategy/bitcoinalpha/bcaparameters.py"
			],
			[
				"fetig",
				"scripts/fetch-ig"
			],
			[
				"fetch-bit",
				"scripts/fetch-bitmex"
			],
			[
				"bin",
				"scripts/fetch-binance"
			],
			[
				"bit",
				"scripts/fetch-bitmex"
			],
			[
				"fet",
				"scripts/fetch-ig"
			],
			[
				"pg",
				"database/pgsql.py"
			],
			[
				"bcap",
				"strategy/bitcoinalpha/bcaparameters.py"
			],
			[
				"trad",
				"trader/connector/bitmex/trader.py"
			],
			[
				"ytr",
				"strategy/strategytrade.py"
			],
			[
				"stra",
				"strategy/strategy.py"
			],
			[
				"tradeop",
				"strategy/tradeop/tradeop.py"
			],
			[
				"ytrad",
				"strategy/strategytrade.py"
			],
			[
				"ytra",
				"strategy/strategytrade.py"
			],
			[
				"bitm",
				"scripts/fetch-bitmex"
			],
			[
				"yt",
				"strategy/strategytrade.py"
			],
			[
				"bcst",
				"strategy/bitcoinalpha/bcastrategytrader.py"
			],
			[
				"sign",
				"strategy/strategyindmargintrade.py"
			],
			[
				"papertr",
				"trader/connector/papertrader/trader.py"
			],
			[
				"ut",
				"strategy/indicator/utils.py"
			],
			[
				"pio",
				"strategy/indicator/pivotpoint/pivotpoint.py"
			],
			[
				"pric",
				"strategy/indicator/price/price.py"
			],
			[
				"ins",
				"instrument/instrument.py"
			],
			[
				"regio",
				"app/regioncommands.py"
			],
			[
				"str",
				"strategy/strategy.py"
			],
			[
				"ytrade",
				"strategy/strategytrade.py"
			],
			[
				"desk",
				"monitor/desktopnotifier.py"
			],
			[
				"castra",
				"strategy/cryptoalpha/castrategytrader.py"
			],
			[
				"strat",
				"strategy/strategy.py"
			],
			[
				"cast",
				"strategy/cryptoalpha/castrategytrader.py"
			],
			[
				"des",
				"monitor/desktopnotifier.py"
			],
			[
				"wa",
				"watcher/connector/bitmex/watcher.py"
			],
			[
				"ter",
				"terminal/terminal.py"
			],
			[
				"wach",
				"watcher/connector/bitmex/watcher.py"
			],
			[
				"siisl",
				"common/siislog.py"
			],
			[
				"bcasubb",
				"strategy/bitcoinalpha/bcasubb.py"
			],
			[
				"castr",
				"strategy/cryptoalpha/castrategytrader.py"
			],
			[
				"bcasuba",
				"strategy/bitcoinalpha/bcasuba.py"
			],
			[
				"bitmex",
				"connector/bitmex/connector.py"
			],
			[
				"mys",
				"database/mysql.py"
			],
			[
				"bca",
				"strategy/bitcoinalpha/bcastrategytrader.py"
			],
			[
				"",
				"strategy/strategyindmargintrade.py"
			],
			[
				"my",
				"database/mysql.py"
			],
			[
				"pgs",
				"database/pgsql.py"
			],
			[
				"bcastr",
				"strategy/bitcoinalpha/bcastrategytrader.py"
			],
			[
				"bcast",
				"strategy/bitcoinalpha/bcastrategytrader.py"
			],
			[
				"po",
				"trader/position.py"
			],
			[
				"account",
				"trader/connector/bitmex/account.py"
			],
			[
				"acc",
				"trader/account.py"
			],
			[
				"siis",
				"siis.py"
			],
			[
				"region",
				"strategy/region/region.py"
			],
			[
				"dat",
				"database/database.py"
			],
			[
				"data",
				"database/database.py"
			],
			[
				"casuba",
				"strategy/cryptoalpha/casuba.py"
			],
			[
				"watche",
				"watcher/connector/bitmex/watcher.py"
			],
			[
				"margi",
				"strategy/strategymargintrade.py"
			],
			[
				"pos",
				"trader/position.py"
			],
			[
				"fastr",
				"strategy/forexalpha/fastrategy.py"
			],
			[
				"fast",
				"strategy/forexalpha/fastrategy.py"
			],
			[
				"strateg",
				"strategy/strategy.py"
			],
			[
				"pref",
				"scripts/prefetch-bitmex"
			],
			[
				"wat",
				"watcher/connector/bitmex/watcher.py"
			],
			[
				"bcasub",
				"strategy/bitcoinalpha/bcasub.py"
			],
			[
				"timef",
				"strategy/timeframebasedsub.py"
			],
			[
				"casub",
				"strategy/cryptoalpha/casub.py"
			],
			[
				"bcasu",
				"strategy/bitcoinalpha/bcasub.py"
			],
			[
				"casubb",
				"strategy/cryptoalpha/casubb.py"
			],
			[
				"cap",
				"strategy/cryptoalpha/caparameters2.py"
			],
			[
				"help",
				"app/help.py"
			],
			[
				"term",
				"terminal/terminal.py"
			],
			[
				"asset",
				"strategy/strategyassettrade.py"
			],
			[
				"capar",
				"strategy/cryptoalpha/caparameters2.py"
			],
			[
				"mar",
				"trader/market.py"
			],
			[
				"strategytr",
				"strategy/strategytrader.py"
			],
			[
				"pgsql",
				"database/pgsql.py"
			],
			[
				"inst",
				"instrument/instrument.py"
			],
			[
				"strar",
				"strategy/strategytrader.py"
			],
			[
				"time",
				"strategy/timeframebasedstrategytrader.py"
			],
			[
				"mark",
				"trader/market.py"
			],
			[
				"instr",
				"instrument/instrument.py"
			],
			[
				"zi",
				"strategy/indicator/zigzag/zigzag.py"
			],
			[
				"sinew",
				"strategy/indicator/sinewave/sinewave.py"
			],
			[
				"sig",
				"notifier/signal.py"
			],
			[
				"in",
				"instrument/instrument.py"
			],
			[
				"i",
				"instrument/instrument.py"
			],
			[
				"yass",
				"strategy/strategyassettrade.py"
			],
			[
				"fib",
				"strategy/indicator/fibonacci/fibonacci.py"
			],
			[
				"fibo",
				"strategy/indicator/fibonacci/fibonacci.py"
			],
			[
				"sma",
				"strategy/indicator/sma/sma.py"
			],
			[
				"stoc",
				"strategy/indicator/stochastic/stochastic.py"
			],
			[
				"stochr",
				"strategy/indicator/stochrsi/stochrsi.py"
			],
			[
				"util",
				"strategy/indicator/utils.py"
			],
			[
				"conf",
				"config/config.py"
			],
			[
				"sm",
				"strategy/indicator/sma/sma.py"
			],
			[
				"strea",
				"connector/ig/stream.py"
			],
			[
				"casubc",
				"strategy/cryptoalpha/casubc.py"
			],
			[
				"ca",
				"strategy/cryptoalpha/casuba.py"
			],
			[
				"capa",
				"strategy/cryptoalpha/caparameters2.py"
			],
			[
				"magin",
				"strategy/strategymargintrade.py"
			],
			[
				"serv",
				"strategy/service.py"
			],
			[
				"servic",
				"view/service.py"
			],
			[
				"ws.p",
				"connector/bitmex/ws.py"
			],
			[
				"connect",
				"connector/ig/connector.py"
			],
			[
				"ligh",
				"connector/ig/lightstreamer.py"
			],
			[
				"sis",
				"siis.sublime-project"
			],
			[
				"conne",
				"connector/ig/connector.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/dev/plantpad/master/plantpad.sublime-workspace"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Affix"
			]
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				1
			]
		]
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 280.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
